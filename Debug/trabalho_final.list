
trabalho_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062bc  080062bc  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080062bc  080062bc  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062bc  080062bc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080062c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000204  080064c8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080064c8  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2fb  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dfa  00000000  00000000  0002c528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002e328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000238f  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a986  00000000  00000000  00031ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dcce  00000000  00000000  0003c765  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  000ca4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f84 	.word	0x08005f84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	08005f84 	.word	0x08005f84

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <__aeabi_frsub>:
 8000940:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000944:	e002      	b.n	800094c <__addsf3>
 8000946:	bf00      	nop

08000948 <__aeabi_fsub>:
 8000948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800094c <__addsf3>:
 800094c:	0042      	lsls	r2, r0, #1
 800094e:	bf1f      	itttt	ne
 8000950:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000954:	ea92 0f03 	teqne	r2, r3
 8000958:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800095c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000960:	d06a      	beq.n	8000a38 <__addsf3+0xec>
 8000962:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000966:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096a:	bfc1      	itttt	gt
 800096c:	18d2      	addgt	r2, r2, r3
 800096e:	4041      	eorgt	r1, r0
 8000970:	4048      	eorgt	r0, r1
 8000972:	4041      	eorgt	r1, r0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	2b19      	cmp	r3, #25
 800097a:	bf88      	it	hi
 800097c:	4770      	bxhi	lr
 800097e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000982:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4240      	negne	r0, r0
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000996:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4249      	negne	r1, r1
 800099e:	ea92 0f03 	teq	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <__addsf3+0xd8>
 80009a4:	f1a2 0201 	sub.w	r2, r2, #1
 80009a8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ac:	eb10 000c 	adds.w	r0, r0, ip
 80009b0:	f1c3 0320 	rsb	r3, r3, #32
 80009b4:	fa01 f103 	lsl.w	r1, r1, r3
 80009b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	d502      	bpl.n	80009c4 <__addsf3+0x78>
 80009be:	4249      	negs	r1, r1
 80009c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c8:	d313      	bcc.n	80009f2 <__addsf3+0xa6>
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d306      	bcc.n	80009de <__addsf3+0x92>
 80009d0:	0840      	lsrs	r0, r0, #1
 80009d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d6:	f102 0201 	add.w	r2, r2, #1
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	d251      	bcs.n	8000a82 <__addsf3+0x136>
 80009de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	ea40 0003 	orr.w	r0, r0, r3
 80009f0:	4770      	bx	lr
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	eb40 0000 	adc.w	r0, r0, r0
 80009f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	d1ed      	bne.n	80009de <__addsf3+0x92>
 8000a02:	fab0 fc80 	clz	ip, r0
 8000a06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a12:	bfaa      	itet	ge
 8000a14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a18:	4252      	neglt	r2, r2
 8000a1a:	4318      	orrge	r0, r3
 8000a1c:	bfbc      	itt	lt
 8000a1e:	40d0      	lsrlt	r0, r2
 8000a20:	4318      	orrlt	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	f092 0f00 	teq	r2, #0
 8000a28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a2c:	bf06      	itte	eq
 8000a2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a32:	3201      	addeq	r2, #1
 8000a34:	3b01      	subne	r3, #1
 8000a36:	e7b5      	b.n	80009a4 <__addsf3+0x58>
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d021      	beq.n	8000a8c <__addsf3+0x140>
 8000a48:	ea92 0f03 	teq	r2, r3
 8000a4c:	d004      	beq.n	8000a58 <__addsf3+0x10c>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	bf08      	it	eq
 8000a54:	4608      	moveq	r0, r1
 8000a56:	4770      	bx	lr
 8000a58:	ea90 0f01 	teq	r0, r1
 8000a5c:	bf1c      	itt	ne
 8000a5e:	2000      	movne	r0, #0
 8000a60:	4770      	bxne	lr
 8000a62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a66:	d104      	bne.n	8000a72 <__addsf3+0x126>
 8000a68:	0040      	lsls	r0, r0, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	4770      	bx	lr
 8000a72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a76:	bf3c      	itt	cc
 8000a78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bxcc	lr
 8000a7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	4770      	bx	lr
 8000a8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a90:	bf16      	itet	ne
 8000a92:	4608      	movne	r0, r1
 8000a94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a98:	4601      	movne	r1, r0
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	bf06      	itte	eq
 8000a9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa2:	ea90 0f01 	teqeq	r0, r1
 8000aa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ui2f>:
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e004      	b.n	8000abc <__aeabi_i2f+0x8>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_i2f>:
 8000ab4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	bf48      	it	mi
 8000aba:	4240      	negmi	r0, r0
 8000abc:	ea5f 0c00 	movs.w	ip, r0
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac8:	4601      	mov	r1, r0
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	e01c      	b.n	8000b0a <__aeabi_l2f+0x2a>

08000ad0 <__aeabi_ul2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e00a      	b.n	8000af4 <__aeabi_l2f+0x14>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_l2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_l2f+0x14>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	ea5f 0c01 	movs.w	ip, r1
 8000af8:	bf02      	ittt	eq
 8000afa:	4684      	moveq	ip, r0
 8000afc:	4601      	moveq	r1, r0
 8000afe:	2000      	moveq	r0, #0
 8000b00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b04:	bf08      	it	eq
 8000b06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0e:	fabc f28c 	clz	r2, ip
 8000b12:	3a08      	subs	r2, #8
 8000b14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b18:	db10      	blt.n	8000b3c <__aeabi_l2f+0x5c>
 8000b1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f102 0220 	add.w	r2, r2, #32
 8000b40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_fmul>:
 8000b5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b64:	bf1e      	ittt	ne
 8000b66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6a:	ea92 0f0c 	teqne	r2, ip
 8000b6e:	ea93 0f0c 	teqne	r3, ip
 8000b72:	d06f      	beq.n	8000c54 <__aeabi_fmul+0xf8>
 8000b74:	441a      	add	r2, r3
 8000b76:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7a:	0240      	lsls	r0, r0, #9
 8000b7c:	bf18      	it	ne
 8000b7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b82:	d01e      	beq.n	8000bc2 <__aeabi_fmul+0x66>
 8000b84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b90:	fba0 3101 	umull	r3, r1, r0, r1
 8000b94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b9c:	bf3e      	ittt	cc
 8000b9e:	0049      	lslcc	r1, r1, #1
 8000ba0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba4:	005b      	lslcc	r3, r3, #1
 8000ba6:	ea40 0001 	orr.w	r0, r0, r1
 8000baa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bae:	2afd      	cmp	r2, #253	; 0xfd
 8000bb0:	d81d      	bhi.n	8000bee <__aeabi_fmul+0x92>
 8000bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	4770      	bx	lr
 8000bc2:	f090 0f00 	teq	r0, #0
 8000bc6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bca:	bf08      	it	eq
 8000bcc:	0249      	lsleq	r1, r1, #9
 8000bce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd6:	3a7f      	subs	r2, #127	; 0x7f
 8000bd8:	bfc2      	ittt	gt
 8000bda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bde:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be2:	4770      	bxgt	lr
 8000be4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	dc5d      	bgt.n	8000cac <__aeabi_fmul+0x150>
 8000bf0:	f112 0f19 	cmn.w	r2, #25
 8000bf4:	bfdc      	itt	le
 8000bf6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bfa:	4770      	bxle	lr
 8000bfc:	f1c2 0200 	rsb	r2, r2, #0
 8000c00:	0041      	lsls	r1, r0, #1
 8000c02:	fa21 f102 	lsr.w	r1, r1, r2
 8000c06:	f1c2 0220 	rsb	r2, r2, #32
 8000c0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c12:	f140 0000 	adc.w	r0, r0, #0
 8000c16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1a:	bf08      	it	eq
 8000c1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c20:	4770      	bx	lr
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0040      	lsleq	r0, r0, #1
 8000c2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c32:	3a01      	subeq	r2, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fmul+0xce>
 8000c36:	ea40 000c 	orr.w	r0, r0, ip
 8000c3a:	f093 0f00 	teq	r3, #0
 8000c3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c42:	bf02      	ittt	eq
 8000c44:	0049      	lsleq	r1, r1, #1
 8000c46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c4a:	3b01      	subeq	r3, #1
 8000c4c:	d0f9      	beq.n	8000c42 <__aeabi_fmul+0xe6>
 8000c4e:	ea41 010c 	orr.w	r1, r1, ip
 8000c52:	e78f      	b.n	8000b74 <__aeabi_fmul+0x18>
 8000c54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c58:	ea92 0f0c 	teq	r2, ip
 8000c5c:	bf18      	it	ne
 8000c5e:	ea93 0f0c 	teqne	r3, ip
 8000c62:	d00a      	beq.n	8000c7a <__aeabi_fmul+0x11e>
 8000c64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c68:	bf18      	it	ne
 8000c6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c6e:	d1d8      	bne.n	8000c22 <__aeabi_fmul+0xc6>
 8000c70:	ea80 0001 	eor.w	r0, r0, r1
 8000c74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f090 0f00 	teq	r0, #0
 8000c7e:	bf17      	itett	ne
 8000c80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c84:	4608      	moveq	r0, r1
 8000c86:	f091 0f00 	teqne	r1, #0
 8000c8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c8e:	d014      	beq.n	8000cba <__aeabi_fmul+0x15e>
 8000c90:	ea92 0f0c 	teq	r2, ip
 8000c94:	d101      	bne.n	8000c9a <__aeabi_fmul+0x13e>
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	d10f      	bne.n	8000cba <__aeabi_fmul+0x15e>
 8000c9a:	ea93 0f0c 	teq	r3, ip
 8000c9e:	d103      	bne.n	8000ca8 <__aeabi_fmul+0x14c>
 8000ca0:	024b      	lsls	r3, r1, #9
 8000ca2:	bf18      	it	ne
 8000ca4:	4608      	movne	r0, r1
 8000ca6:	d108      	bne.n	8000cba <__aeabi_fmul+0x15e>
 8000ca8:	ea80 0001 	eor.w	r0, r0, r1
 8000cac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fdiv>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d069      	beq.n	8000db0 <__aeabi_fdiv+0xec>
 8000cdc:	eba2 0203 	sub.w	r2, r2, r3
 8000ce0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce4:	0249      	lsls	r1, r1, #9
 8000ce6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cea:	d037      	beq.n	8000d5c <__aeabi_fdiv+0x98>
 8000cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	bf38      	it	cc
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	bf24      	itt	cs
 8000d0e:	1a5b      	subcs	r3, r3, r1
 8000d10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d18:	bf24      	itt	cs
 8000d1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d26:	bf24      	itt	cs
 8000d28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d34:	bf24      	itt	cs
 8000d36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	bf18      	it	ne
 8000d42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d46:	d1e0      	bne.n	8000d0a <__aeabi_fdiv+0x46>
 8000d48:	2afd      	cmp	r2, #253	; 0xfd
 8000d4a:	f63f af50 	bhi.w	8000bee <__aeabi_fmul+0x92>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d64:	327f      	adds	r2, #127	; 0x7f
 8000d66:	bfc2      	ittt	gt
 8000d68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d70:	4770      	bxgt	lr
 8000d72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	e737      	b.n	8000bee <__aeabi_fmul+0x92>
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fdiv+0xc2>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fdiv+0xda>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e795      	b.n	8000cdc <__aeabi_fdiv+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d108      	bne.n	8000dcc <__aeabi_fdiv+0x108>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	f47f af7d 	bne.w	8000cba <__aeabi_fmul+0x15e>
 8000dc0:	ea93 0f0c 	teq	r3, ip
 8000dc4:	f47f af70 	bne.w	8000ca8 <__aeabi_fmul+0x14c>
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e776      	b.n	8000cba <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	d104      	bne.n	8000ddc <__aeabi_fdiv+0x118>
 8000dd2:	024b      	lsls	r3, r1, #9
 8000dd4:	f43f af4c 	beq.w	8000c70 <__aeabi_fmul+0x114>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	e76e      	b.n	8000cba <__aeabi_fmul+0x15e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1ca      	bne.n	8000d7e <__aeabi_fdiv+0xba>
 8000de8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dec:	f47f af5c 	bne.w	8000ca8 <__aeabi_fmul+0x14c>
 8000df0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	f47f af3c 	bne.w	8000c70 <__aeabi_fmul+0x114>
 8000df8:	e75f      	b.n	8000cba <__aeabi_fmul+0x15e>
 8000dfa:	bf00      	nop

08000dfc <__gesf2>:
 8000dfc:	f04f 3cff 	mov.w	ip, #4294967295
 8000e00:	e006      	b.n	8000e10 <__cmpsf2+0x4>
 8000e02:	bf00      	nop

08000e04 <__lesf2>:
 8000e04:	f04f 0c01 	mov.w	ip, #1
 8000e08:	e002      	b.n	8000e10 <__cmpsf2+0x4>
 8000e0a:	bf00      	nop

08000e0c <__cmpsf2>:
 8000e0c:	f04f 0c01 	mov.w	ip, #1
 8000e10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e20:	bf18      	it	ne
 8000e22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e26:	d011      	beq.n	8000e4c <__cmpsf2+0x40>
 8000e28:	b001      	add	sp, #4
 8000e2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2e:	bf18      	it	ne
 8000e30:	ea90 0f01 	teqne	r0, r1
 8000e34:	bf58      	it	pl
 8000e36:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3a:	bf88      	it	hi
 8000e3c:	17c8      	asrhi	r0, r1, #31
 8000e3e:	bf38      	it	cc
 8000e40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e44:	bf18      	it	ne
 8000e46:	f040 0001 	orrne.w	r0, r0, #1
 8000e4a:	4770      	bx	lr
 8000e4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e50:	d102      	bne.n	8000e58 <__cmpsf2+0x4c>
 8000e52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e56:	d105      	bne.n	8000e64 <__cmpsf2+0x58>
 8000e58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e5c:	d1e4      	bne.n	8000e28 <__cmpsf2+0x1c>
 8000e5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e62:	d0e1      	beq.n	8000e28 <__cmpsf2+0x1c>
 8000e64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <__aeabi_cfrcmple>:
 8000e6c:	4684      	mov	ip, r0
 8000e6e:	4608      	mov	r0, r1
 8000e70:	4661      	mov	r1, ip
 8000e72:	e7ff      	b.n	8000e74 <__aeabi_cfcmpeq>

08000e74 <__aeabi_cfcmpeq>:
 8000e74:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e76:	f7ff ffc9 	bl	8000e0c <__cmpsf2>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	bf48      	it	mi
 8000e7e:	f110 0f00 	cmnmi.w	r0, #0
 8000e82:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e84 <__aeabi_fcmpeq>:
 8000e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e88:	f7ff fff4 	bl	8000e74 <__aeabi_cfcmpeq>
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2001      	moveq	r0, #1
 8000e90:	2000      	movne	r0, #0
 8000e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e96:	bf00      	nop

08000e98 <__aeabi_fcmplt>:
 8000e98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e9c:	f7ff ffea 	bl	8000e74 <__aeabi_cfcmpeq>
 8000ea0:	bf34      	ite	cc
 8000ea2:	2001      	movcc	r0, #1
 8000ea4:	2000      	movcs	r0, #0
 8000ea6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eaa:	bf00      	nop

08000eac <__aeabi_fcmple>:
 8000eac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb0:	f7ff ffe0 	bl	8000e74 <__aeabi_cfcmpeq>
 8000eb4:	bf94      	ite	ls
 8000eb6:	2001      	movls	r0, #1
 8000eb8:	2000      	movhi	r0, #0
 8000eba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_fcmpge>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff ffd2 	bl	8000e6c <__aeabi_cfrcmple>
 8000ec8:	bf94      	ite	ls
 8000eca:	2001      	movls	r0, #1
 8000ecc:	2000      	movhi	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_fcmpgt>:
 8000ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed8:	f7ff ffc8 	bl	8000e6c <__aeabi_cfrcmple>
 8000edc:	bf34      	ite	cc
 8000ede:	2001      	movcc	r0, #1
 8000ee0:	2000      	movcs	r0, #0
 8000ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_f2uiz>:
 8000ee8:	0042      	lsls	r2, r0, #1
 8000eea:	d20e      	bcs.n	8000f0a <__aeabi_f2uiz+0x22>
 8000eec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef0:	d30b      	bcc.n	8000f0a <__aeabi_f2uiz+0x22>
 8000ef2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efa:	d409      	bmi.n	8000f10 <__aeabi_f2uiz+0x28>
 8000efc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f04:	fa23 f002 	lsr.w	r0, r3, r2
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr
 8000f10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f14:	d101      	bne.n	8000f1a <__aeabi_f2uiz+0x32>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	d102      	bne.n	8000f20 <__aeabi_f2uiz+0x38>
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	4770      	bx	lr
 8000f20:	f04f 0000 	mov.w	r0, #0
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <variaveis_display>:
 * @param[in] d5 : unsigned int de 16 bits, contendo a porta conectada oa pino D5 do display.
 * @param[in] d6 : unsigned int de 16 bits, contendo a porta conectada oa pino D6 do display.
 * @param[in] d7 : unsigned int de 16 bits, contendo a porta conectada oa pino D7 do display.
 */

void variaveis_display(uint16_t e, uint16_t rs, uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7){
 8000f28:	b490      	push	{r4, r7}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	803b      	strh	r3, [r7, #0]
	E = e;
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <variaveis_display+0x4c>)
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	8013      	strh	r3, [r2, #0]
	RS = rs;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <variaveis_display+0x50>)
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	8013      	strh	r3, [r2, #0]

	D4 = d4;
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <variaveis_display+0x54>)
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	8013      	strh	r3, [r2, #0]
	D5 = d5;
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <variaveis_display+0x58>)
 8000f5a:	883b      	ldrh	r3, [r7, #0]
 8000f5c:	8013      	strh	r3, [r2, #0]
	D6 = d6;
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <variaveis_display+0x5c>)
 8000f60:	8a3b      	ldrh	r3, [r7, #16]
 8000f62:	8013      	strh	r3, [r2, #0]
	D7 = d7;
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <variaveis_display+0x60>)
 8000f66:	8abb      	ldrh	r3, [r7, #20]
 8000f68:	8013      	strh	r3, [r2, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc90      	pop	{r4, r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000022 	.word	0x20000022
 8000f78:	20000024 	.word	0x20000024
 8000f7c:	2000001a 	.word	0x2000001a
 8000f80:	2000001c 	.word	0x2000001c
 8000f84:	2000001e 	.word	0x2000001e
 8000f88:	20000020 	.word	0x20000020

08000f8c <inicializar_display>:
 *
 * Essa função inicializa o diplay de 16X2 com 4 bits para comunicação, sem cursor e escreve deslocando o cursor para direita.
 * E carrega os carcteres especiais para CRGRAM.
 */

void inicializar_display(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

	comandos_display(0x33); 
 8000f90:	2033      	movs	r0, #51	; 0x33
 8000f92:	f000 f82d 	bl	8000ff0 <comandos_display>
	comandos_display(0x32);
 8000f96:	2032      	movs	r0, #50	; 0x32
 8000f98:	f000 f82a 	bl	8000ff0 <comandos_display>
	comandos_display(0x28); //display 16X2 de 4 bits
 8000f9c:	2028      	movs	r0, #40	; 0x28
 8000f9e:	f000 f827 	bl	8000ff0 <comandos_display>
	comandos_display(0x0C); //display sem cursos
 8000fa2:	200c      	movs	r0, #12
 8000fa4:	f000 f824 	bl	8000ff0 <comandos_display>
	//caracteres_especiais(posicao_c1, c1);
	//caracteres_especiais(posicao_c2, c2);
	//caracteres_especiais(posicao_c3, c3);
	//caracteres_especiais(posicao_c4, c4);
	//caracteres_especiais(posicao_c5, c5);
  }
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <tempo_display>:
 *
 * Essa função é usada para que entre cada mensagem ocorra um intervalo de tempo, como o fabricante recomenda.
 *
 */

void tempo_display(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, E, GPIO_PIN_SET);
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <tempo_display+0x2c>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4808      	ldr	r0, [pc, #32]	; (8000fdc <tempo_display+0x30>)
 8000fba:	f003 f950 	bl	800425e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f002 f870 	bl	80030a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, E, GPIO_PIN_RESET);
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <tempo_display+0x2c>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <tempo_display+0x30>)
 8000fce:	f003 f946 	bl	800425e <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000022 	.word	0x20000022
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <limpar_display>:
 *
 * Essa função é usada para limpara todos os caracteres impressos no display.
 *
 */

void limpar_display(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	comandos_display(0x01);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f803 	bl	8000ff0 <comandos_display>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <comandos_display>:
 * Essa função recebe uma instrução em hexadecimal e a envia para o display
 *
 * @param[in] nstrucao : char de 8 bits, contendo a instrução para o display.
 */

void comandos_display(char instrucao){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]

	int8_t vet_bin[8];

	int16_t i = instrucao;//strtol(instrucao, NULL, 16);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	82fb      	strh	r3, [r7, #22]
	
	//envia para a função dec2bin um número de decimal e recebe um vetor com o número em binário
	dec2bin(i, &vet_bin);
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f924 	bl	8001256 <dec2bin>

	HAL_GPIO_WritePin(GPIOA, E, GPIO_PIN_RESET);
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <comandos_display+0xe8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4831      	ldr	r0, [pc, #196]	; (80010dc <comandos_display+0xec>)
 8001018:	f003 f921 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RS, GPIO_PIN_RESET);
 800101c:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <comandos_display+0xf0>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	482d      	ldr	r0, [pc, #180]	; (80010dc <comandos_display+0xec>)
 8001026:	f003 f91a 	bl	800425e <HAL_GPIO_WritePin>

	//manda para o display os 4 bits mais significativos do carácter
	HAL_GPIO_WritePin(GPIOA, D7, vet_bin[0]);
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <comandos_display+0xf4>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	4619      	mov	r1, r3
 8001036:	4829      	ldr	r0, [pc, #164]	; (80010dc <comandos_display+0xec>)
 8001038:	f003 f911 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6, vet_bin[1]);
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <comandos_display+0xf8>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	4619      	mov	r1, r3
 8001048:	4824      	ldr	r0, [pc, #144]	; (80010dc <comandos_display+0xec>)
 800104a:	f003 f908 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5, vet_bin[2]);
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <comandos_display+0xfc>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	4619      	mov	r1, r3
 800105a:	4820      	ldr	r0, [pc, #128]	; (80010dc <comandos_display+0xec>)
 800105c:	f003 f8ff 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D4, vet_bin[3]);
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <comandos_display+0x100>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	4619      	mov	r1, r3
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <comandos_display+0xec>)
 800106e:	f003 f8f6 	bl	800425e <HAL_GPIO_WritePin>
	tempo_display();
 8001072:	f7ff ff9b 	bl	8000fac <tempo_display>

	//manda para o display os 4 bits menos significativos do carácter
	HAL_GPIO_WritePin(GPIOA, D7, vet_bin[4]);
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <comandos_display+0xf4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	4619      	mov	r1, r3
 8001082:	4816      	ldr	r0, [pc, #88]	; (80010dc <comandos_display+0xec>)
 8001084:	f003 f8eb 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6, vet_bin[5]);
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <comandos_display+0xf8>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	4619      	mov	r1, r3
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <comandos_display+0xec>)
 8001096:	f003 f8e2 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5, vet_bin[6]);
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <comandos_display+0xfc>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f997 2012 	ldrsb.w	r2, [r7, #18]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <comandos_display+0xec>)
 80010a8:	f003 f8d9 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D4, vet_bin[7]);
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <comandos_display+0x100>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <comandos_display+0xec>)
 80010ba:	f003 f8d0 	bl	800425e <HAL_GPIO_WritePin>
	tempo_display();
 80010be:	f7ff ff75 	bl	8000fac <tempo_display>

	HAL_GPIO_WritePin(GPIOA, RS, GPIO_PIN_SET);
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <comandos_display+0xf0>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <comandos_display+0xec>)
 80010cc:	f003 f8c7 	bl	800425e <HAL_GPIO_WritePin>

}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000022 	.word	0x20000022
 80010dc:	40010800 	.word	0x40010800
 80010e0:	20000024 	.word	0x20000024
 80010e4:	20000020 	.word	0x20000020
 80010e8:	2000001e 	.word	0x2000001e
 80010ec:	2000001c 	.word	0x2000001c
 80010f0:	2000001a 	.word	0x2000001a

080010f4 <escrever_texto_display>:
 *
 * @param[in] posicao : char de 8 bits, contendo a possição de início da escrita no display.
 * @param[in] *texto : ponteiro para char, contendo o vetor de char para ser escrito no display.
 */

void escrever_texto_display(char posicao, char *texto){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]

	uint16_t i = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	81fb      	strh	r3, [r7, #14]
	
	comandos_display(posicao);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff72 	bl	8000ff0 <comandos_display>

	//escreve a vetor de char no display
	while(i < 17 & texto[i] != '\0'){
 800110c:	e053      	b.n	80011b6 <escrever_texto_display+0xc2>

		//if para identificar carcteres especiais
		if(texto[i] == 195){
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2bc3      	cmp	r3, #195	; 0xc3
 8001118:	d143      	bne.n	80011a2 <escrever_texto_display+0xae>
			//caracter é
			if(texto[i+1] == 169){
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	3301      	adds	r3, #1
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2ba9      	cmp	r3, #169	; 0xa9
 8001126:	d105      	bne.n	8001134 <escrever_texto_display+0x40>
				texto[i+1] = 0;
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	3301      	adds	r3, #1
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
			}

			//caracter é
			if(texto[i+1] == 161){
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	3301      	adds	r3, #1
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2ba1      	cmp	r3, #161	; 0xa1
 8001140:	d105      	bne.n	800114e <escrever_texto_display+0x5a>
				texto[i+1] = 1;
 8001142:	89fb      	ldrh	r3, [r7, #14]
 8001144:	3301      	adds	r3, #1
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
			}

			//caracter ç
			if(texto[i+1] == 167){
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	3301      	adds	r3, #1
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2ba7      	cmp	r3, #167	; 0xa7
 800115a:	d105      	bne.n	8001168 <escrever_texto_display+0x74>
				texto[i+1] = 2;
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	3301      	adds	r3, #1
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	2202      	movs	r2, #2
 8001166:	701a      	strb	r2, [r3, #0]
			}

			//caracter ã
			if(texto[i+1] == 163){
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	3301      	adds	r3, #1
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2ba3      	cmp	r3, #163	; 0xa3
 8001174:	d105      	bne.n	8001182 <escrever_texto_display+0x8e>
				texto[i+1] = 3;
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	3301      	adds	r3, #1
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	2203      	movs	r2, #3
 8001180:	701a      	strb	r2, [r3, #0]
			}

			//caracter õ
			if(texto[i+1] == 181){
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	3301      	adds	r3, #1
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2bb5      	cmp	r3, #181	; 0xb5
 800118e:	d105      	bne.n	800119c <escrever_texto_display+0xa8>
				texto[i+1] = 4;
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	3301      	adds	r3, #1
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	2204      	movs	r2, #4
 800119a:	701a      	strb	r2, [r3, #0]
			}

			i++;
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	3301      	adds	r3, #1
 80011a0:	81fb      	strh	r3, [r7, #14]
		}

		//chama a função para escrever os caracteres no display
		escreve_char(texto[i]);
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f884 	bl	80012b8 <escreve_char>
		i++;
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	3301      	adds	r3, #1
 80011b4:	81fb      	strh	r3, [r7, #14]
	while(i < 17 & texto[i] != '\0'){
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	2b10      	cmp	r3, #16
 80011ba:	bf94      	ite	ls
 80011bc:	2301      	movls	r3, #1
 80011be:	2300      	movhi	r3, #0
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	440b      	add	r3, r1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d198      	bne.n	800110e <escrever_texto_display+0x1a>
		}
	}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <escrever_numero_display>:
 *
 * @param[in] posicao : char de 8 bits, contendo a possição de início da escrita no display.
 * @param[in] variavel : inteiro de 32 bits, contendo o valor para ser escrito no display.
 */

void escrever_numero_display(char posicao, int32_t variavel){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]

	uint16_t i = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	char texto[17];
	int8_t letra[8];

	//converte o valor de inteiro para um vetor de char
	itoa(variavel, texto, 10);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	220a      	movs	r2, #10
 80011fa:	4619      	mov	r1, r3
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f004 fdbd 	bl	8005d7c <itoa>

	comandos_display(posicao);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fef3 	bl	8000ff0 <comandos_display>

	//escreve no diplay o número
	while(i < 17 & texto[i] != '\0'){
 800120a:	e00b      	b.n	8001224 <escrever_numero_display+0x40>

		//chama a função para escrever os caracteres no display
		escreve_char(texto[i]);
 800120c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800120e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001212:	4413      	add	r3, r2
 8001214:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f84d 	bl	80012b8 <escreve_char>
		i++;
 800121e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001220:	3301      	adds	r3, #1
 8001222:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(i < 17 & texto[i] != '\0'){
 8001224:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001226:	2b10      	cmp	r3, #16
 8001228:	bf94      	ite	ls
 800122a:	2301      	movls	r3, #1
 800122c:	2300      	movhi	r3, #0
 800122e:	b2da      	uxtb	r2, r3
 8001230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001232:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001236:	440b      	add	r3, r1
 8001238:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4013      	ands	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1de      	bne.n	800120c <escrever_numero_display+0x28>
		}
	}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <dec2bin>:
 * @param[in] num : inteiro de 16 bits, contendo o valor para ser convertido.
 * @param[out] *bin : ponteiro para um vetor inteiro de 8 bits com 8 posições, onde será gradado o valor em binário do número.
 */


void dec2bin(int16_t num, int8_t *bin){
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	6039      	str	r1, [r7, #0]
 8001260:	80fb      	strh	r3, [r7, #6]

	for (int16_t aux = 7; aux >= 0; aux--)
 8001262:	2307      	movs	r3, #7
 8001264:	81fb      	strh	r3, [r7, #14]
 8001266:	e01e      	b.n	80012a6 <dec2bin+0x50>
	   {
	      if (num % 2 == 0)
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <dec2bin+0x2c>
	         bin[aux] = 0;
 8001274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <dec2bin+0x38>
	      else
	         bin[aux] = 1;
 8001282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	4413      	add	r3, r2
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	      num = num / 2;
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	0fda      	lsrs	r2, r3, #31
 8001294:	4413      	add	r3, r2
 8001296:	105b      	asrs	r3, r3, #1
 8001298:	80fb      	strh	r3, [r7, #6]
	for (int16_t aux = 7; aux >= 0; aux--)
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	3b01      	subs	r3, #1
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	81fb      	strh	r3, [r7, #14]
 80012a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dadc      	bge.n	8001268 <dec2bin+0x12>
	   }
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <escreve_char>:
 * Essa função um caracter do display.
 *
 * @param[in] caracter : unsigned int de 8 bits, contendo o endereço do caracter na DDRAM do display.
 */

void escreve_char(uint8_t caracter){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]

	uint8_t vet_bin[8];

	//envia para a função dec2bin um número em decimal e recebe um vetor com o número em binário
	dec2bin(caracter, &vet_bin);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	f107 0208 	add.w	r2, r7, #8
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ffc2 	bl	8001256 <dec2bin>

	HAL_GPIO_WritePin(GPIOA, RS, GPIO_PIN_SET);
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <escreve_char+0xb8>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	4826      	ldr	r0, [pc, #152]	; (8001374 <escreve_char+0xbc>)
 80012dc:	f002 ffbf 	bl	800425e <HAL_GPIO_WritePin>

	//manda para o display os 4 bits mais significativos do carácter
	HAL_GPIO_WritePin(GPIOA, D7, vet_bin[0]);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <escreve_char+0xc0>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	7a3a      	ldrb	r2, [r7, #8]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4822      	ldr	r0, [pc, #136]	; (8001374 <escreve_char+0xbc>)
 80012ea:	f002 ffb8 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6, vet_bin[1]);
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <escreve_char+0xc4>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	7a7a      	ldrb	r2, [r7, #9]
 80012f4:	4619      	mov	r1, r3
 80012f6:	481f      	ldr	r0, [pc, #124]	; (8001374 <escreve_char+0xbc>)
 80012f8:	f002 ffb1 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5, vet_bin[2]);
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <escreve_char+0xc8>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	7aba      	ldrb	r2, [r7, #10]
 8001302:	4619      	mov	r1, r3
 8001304:	481b      	ldr	r0, [pc, #108]	; (8001374 <escreve_char+0xbc>)
 8001306:	f002 ffaa 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D4, vet_bin[3]);
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <escreve_char+0xcc>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	7afa      	ldrb	r2, [r7, #11]
 8001310:	4619      	mov	r1, r3
 8001312:	4818      	ldr	r0, [pc, #96]	; (8001374 <escreve_char+0xbc>)
 8001314:	f002 ffa3 	bl	800425e <HAL_GPIO_WritePin>
	tempo_display();
 8001318:	f7ff fe48 	bl	8000fac <tempo_display>

	//manda para o display os 4 bits menos significativos do carácter
	HAL_GPIO_WritePin(GPIOA, D7, vet_bin[4]);
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <escreve_char+0xc0>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	7b3a      	ldrb	r2, [r7, #12]
 8001322:	4619      	mov	r1, r3
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <escreve_char+0xbc>)
 8001326:	f002 ff9a 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6, vet_bin[5]);
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <escreve_char+0xc4>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	7b7a      	ldrb	r2, [r7, #13]
 8001330:	4619      	mov	r1, r3
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <escreve_char+0xbc>)
 8001334:	f002 ff93 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5, vet_bin[6]);
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <escreve_char+0xc8>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	7bba      	ldrb	r2, [r7, #14]
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <escreve_char+0xbc>)
 8001342:	f002 ff8c 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D4, vet_bin[7]);
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <escreve_char+0xcc>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	4619      	mov	r1, r3
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <escreve_char+0xbc>)
 8001350:	f002 ff85 	bl	800425e <HAL_GPIO_WritePin>
	tempo_display();
 8001354:	f7ff fe2a 	bl	8000fac <tempo_display>

	HAL_GPIO_WritePin(GPIOA, RS, GPIO_PIN_RESET);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <escreve_char+0xb8>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <escreve_char+0xbc>)
 8001362:	f002 ff7c 	bl	800425e <HAL_GPIO_WritePin>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000024 	.word	0x20000024
 8001374:	40010800 	.word	0x40010800
 8001378:	20000020 	.word	0x20000020
 800137c:	2000001e 	.word	0x2000001e
 8001380:	2000001c 	.word	0x2000001c
 8001384:	2000001a 	.word	0x2000001a

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b0da      	sub	sp, #360	; 0x168
 800138c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f001 fe27 	bl	8002fe0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 ffdb 	bl	800234c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f001 faf9 	bl	800298c <MX_GPIO_Init>
  MX_DMA_Init();
 800139a:	f001 fab3 	bl	8002904 <MX_DMA_Init>
  MX_ADC1_Init();
 800139e:	f001 f831 	bl	8002404 <MX_ADC1_Init>
  MX_TIM2_Init();
 80013a2:	f001 f993 	bl	80026cc <MX_TIM2_Init>
  MX_TIM1_Init();
 80013a6:	f001 f8f3 	bl	8002590 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013aa:	f001 fa0f 	bl	80027cc <MX_TIM3_Init>
  MX_TIM4_Init();
 80013ae:	f001 fa5b 	bl	8002868 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //calibração do ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80013b2:	48c5      	ldr	r0, [pc, #788]	; (80016c8 <main+0x340>)
 80013b4:	f002 fa4a 	bl	800384c <HAL_ADCEx_Calibration_Start>



  //inicializa timers
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013b8:	210c      	movs	r1, #12
 80013ba:	48c4      	ldr	r0, [pc, #784]	; (80016cc <main+0x344>)
 80013bc:	f003 fdf4 	bl	8004fa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013c0:	2100      	movs	r1, #0
 80013c2:	48c3      	ldr	r0, [pc, #780]	; (80016d0 <main+0x348>)
 80013c4:	f003 fdf0 	bl	8004fa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013c8:	2104      	movs	r1, #4
 80013ca:	48c1      	ldr	r0, [pc, #772]	; (80016d0 <main+0x348>)
 80013cc:	f003 fdec 	bl	8004fa8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80013d0:	48c0      	ldr	r0, [pc, #768]	; (80016d4 <main+0x34c>)
 80013d2:	f003 fd3f 	bl	8004e54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80013d6:	48c0      	ldr	r0, [pc, #768]	; (80016d8 <main+0x350>)
 80013d8:	f003 fd3c 	bl	8004e54 <HAL_TIM_Base_Start_IT>

   //captura a hora do sistema
   strcpy(aux3, __TIME__);
 80013dc:	4abf      	ldr	r2, [pc, #764]	; (80016dc <main+0x354>)
 80013de:	4bc0      	ldr	r3, [pc, #768]	; (80016e0 <main+0x358>)
 80013e0:	cb03      	ldmia	r3!, {r0, r1}
 80013e2:	6010      	str	r0, [r2, #0]
 80013e4:	6051      	str	r1, [r2, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	7213      	strb	r3, [r2, #8]
   horas = atoi(aux3);
 80013ea:	48bc      	ldr	r0, [pc, #752]	; (80016dc <main+0x354>)
 80013ec:	f004 fc85 	bl	8005cfa <atoi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4bbb      	ldr	r3, [pc, #748]	; (80016e4 <main+0x35c>)
 80013f6:	801a      	strh	r2, [r3, #0]
   strcpy(aux3, __TIME__ +3);
 80013f8:	4bbb      	ldr	r3, [pc, #748]	; (80016e8 <main+0x360>)
 80013fa:	4619      	mov	r1, r3
 80013fc:	48b7      	ldr	r0, [pc, #732]	; (80016dc <main+0x354>)
 80013fe:	f004 fcc7 	bl	8005d90 <strcpy>
   minutos = atoi(aux3);
 8001402:	48b6      	ldr	r0, [pc, #728]	; (80016dc <main+0x354>)
 8001404:	f004 fc79 	bl	8005cfa <atoi>
 8001408:	4603      	mov	r3, r0
 800140a:	b29a      	uxth	r2, r3
 800140c:	4bb7      	ldr	r3, [pc, #732]	; (80016ec <main+0x364>)
 800140e:	801a      	strh	r2, [r3, #0]
   strcpy(aux3, __TIME__ +6);
 8001410:	4bb7      	ldr	r3, [pc, #732]	; (80016f0 <main+0x368>)
 8001412:	4619      	mov	r1, r3
 8001414:	48b1      	ldr	r0, [pc, #708]	; (80016dc <main+0x354>)
 8001416:	f004 fcbb 	bl	8005d90 <strcpy>
   segundos = atoi(aux3);
 800141a:	48b0      	ldr	r0, [pc, #704]	; (80016dc <main+0x354>)
 800141c:	f004 fc6d 	bl	8005cfa <atoi>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	4bb3      	ldr	r3, [pc, #716]	; (80016f4 <main+0x36c>)
 8001426:	801a      	strh	r2, [r3, #0]

  //inicializa o display
  variaveis_display(E, RS, D4, D5, D6, D7);
 8001428:	4bb3      	ldr	r3, [pc, #716]	; (80016f8 <main+0x370>)
 800142a:	8818      	ldrh	r0, [r3, #0]
 800142c:	4bb3      	ldr	r3, [pc, #716]	; (80016fc <main+0x374>)
 800142e:	8819      	ldrh	r1, [r3, #0]
 8001430:	4bb3      	ldr	r3, [pc, #716]	; (8001700 <main+0x378>)
 8001432:	881c      	ldrh	r4, [r3, #0]
 8001434:	4bb3      	ldr	r3, [pc, #716]	; (8001704 <main+0x37c>)
 8001436:	881d      	ldrh	r5, [r3, #0]
 8001438:	4bb3      	ldr	r3, [pc, #716]	; (8001708 <main+0x380>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	4ab3      	ldr	r2, [pc, #716]	; (800170c <main+0x384>)
 800143e:	8812      	ldrh	r2, [r2, #0]
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	462b      	mov	r3, r5
 8001446:	4622      	mov	r2, r4
 8001448:	f7ff fd6e 	bl	8000f28 <variaveis_display>
  inicializar_display();
 800144c:	f7ff fd9e 	bl	8000f8c <inicializar_display>
  limpar_display();
 8001450:	f7ff fdc6 	bl	8000fe0 <limpar_display>
  escrever_texto_display(0xC0, "Inicializando...");
 8001454:	49ae      	ldr	r1, [pc, #696]	; (8001710 <main+0x388>)
 8001456:	20c0      	movs	r0, #192	; 0xc0
 8001458:	f7ff fe4c 	bl	80010f4 <escrever_texto_display>
  HAL_Delay(2000);
 800145c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001460:	f001 fe20 	bl	80030a4 <HAL_Delay>
    float tempo_gas;
  }info_capsula;

 info_capsula capsulas[8];

 	strcpy(capsulas[0].nome, "                ");
 8001464:	463b      	mov	r3, r7
 8001466:	4aab      	ldr	r2, [pc, #684]	; (8001714 <main+0x38c>)
 8001468:	461c      	mov	r4, r3
 800146a:	4615      	mov	r5, r2
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[0].tipo_agua, '\0');
 8001474:	463b      	mov	r3, r7
 8001476:	3311      	adds	r3, #17
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fc88 	bl	8005d90 <strcpy>
	capsulas[0].tempo_agua = 0;
 8001480:	463b      	mov	r3, r7
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
	capsulas[0].temperatura_agua = 0;
 8001488:	463b      	mov	r3, r7
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
	capsulas[0].com_gas = no;
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	capsulas[0].tempo_gas = 0;
 8001498:	463b      	mov	r3, r7
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	629a      	str	r2, [r3, #40]	; 0x28

	strcpy(capsulas[1].nome, "      Agua      ");
 80014a0:	463b      	mov	r3, r7
 80014a2:	4a9d      	ldr	r2, [pc, #628]	; (8001718 <main+0x390>)
 80014a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80014a8:	4615      	mov	r5, r2
 80014aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[1].tipo_agua, '\0');
 80014b2:	463b      	mov	r3, r7
 80014b4:	333d      	adds	r3, #61	; 0x3d
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 fc69 	bl	8005d90 <strcpy>
	capsulas[1].tempo_agua = 1.5;
 80014be:	463b      	mov	r3, r7
 80014c0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80014c4:	649a      	str	r2, [r3, #72]	; 0x48
	capsulas[1].temperatura_agua = 0;
 80014c6:	463b      	mov	r3, r7
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	64da      	str	r2, [r3, #76]	; 0x4c
	capsulas[1].com_gas = no;
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	capsulas[1].tempo_gas = 0;
 80014d6:	463b      	mov	r3, r7
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54

	strcpy(capsulas[2].nome, "  Agua com gas  ");
 80014de:	463b      	mov	r3, r7
 80014e0:	4a8e      	ldr	r2, [pc, #568]	; (800171c <main+0x394>)
 80014e2:	f103 0458 	add.w	r4, r3, #88	; 0x58
 80014e6:	4615      	mov	r5, r2
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[2].tipo_agua, "gelada");
 80014f0:	463b      	mov	r3, r7
 80014f2:	3369      	adds	r3, #105	; 0x69
 80014f4:	4a8a      	ldr	r2, [pc, #552]	; (8001720 <main+0x398>)
 80014f6:	6810      	ldr	r0, [r2, #0]
 80014f8:	6018      	str	r0, [r3, #0]
 80014fa:	8891      	ldrh	r1, [r2, #4]
 80014fc:	7992      	ldrb	r2, [r2, #6]
 80014fe:	8099      	strh	r1, [r3, #4]
 8001500:	719a      	strb	r2, [r3, #6]
	capsulas[2].tempo_agua = 3;
 8001502:	463b      	mov	r3, r7
 8001504:	4a87      	ldr	r2, [pc, #540]	; (8001724 <main+0x39c>)
 8001506:	675a      	str	r2, [r3, #116]	; 0x74
	capsulas[2].temperatura_agua = 15;
 8001508:	463b      	mov	r3, r7
 800150a:	4a87      	ldr	r2, [pc, #540]	; (8001728 <main+0x3a0>)
 800150c:	679a      	str	r2, [r3, #120]	; 0x78
	capsulas[2].com_gas = yes;
 800150e:	463b      	mov	r3, r7
 8001510:	2201      	movs	r2, #1
 8001512:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	capsulas[2].tempo_gas = 1.5;
 8001516:	463b      	mov	r3, r7
 8001518:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800151c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	strcpy(capsulas[3].nome, "   Cha gelado   ");
 8001520:	463b      	mov	r3, r7
 8001522:	4a82      	ldr	r2, [pc, #520]	; (800172c <main+0x3a4>)
 8001524:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8001528:	4615      	mov	r5, r2
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[3].tipo_agua, "gelada");
 8001532:	463b      	mov	r3, r7
 8001534:	3395      	adds	r3, #149	; 0x95
 8001536:	4a7a      	ldr	r2, [pc, #488]	; (8001720 <main+0x398>)
 8001538:	6810      	ldr	r0, [r2, #0]
 800153a:	6018      	str	r0, [r3, #0]
 800153c:	8891      	ldrh	r1, [r2, #4]
 800153e:	7992      	ldrb	r2, [r2, #6]
 8001540:	8099      	strh	r1, [r3, #4]
 8001542:	719a      	strb	r2, [r3, #6]
	capsulas[3].tempo_agua = 2.7;
 8001544:	463b      	mov	r3, r7
 8001546:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <main+0x3a8>)
 8001548:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	capsulas[3].temperatura_agua = 20;
 800154c:	463b      	mov	r3, r7
 800154e:	4a79      	ldr	r2, [pc, #484]	; (8001734 <main+0x3ac>)
 8001550:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	capsulas[3].com_gas = no;
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	capsulas[3].tempo_gas = 0;
 800155c:	463b      	mov	r3, r7
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	strcpy(capsulas[4].nome, "   Cha quente   ");
 8001566:	463b      	mov	r3, r7
 8001568:	4a73      	ldr	r2, [pc, #460]	; (8001738 <main+0x3b0>)
 800156a:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800156e:	4615      	mov	r5, r2
 8001570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[4].tipo_agua, "quente");
 8001578:	463b      	mov	r3, r7
 800157a:	33c1      	adds	r3, #193	; 0xc1
 800157c:	4a6f      	ldr	r2, [pc, #444]	; (800173c <main+0x3b4>)
 800157e:	6810      	ldr	r0, [r2, #0]
 8001580:	6018      	str	r0, [r3, #0]
 8001582:	8891      	ldrh	r1, [r2, #4]
 8001584:	7992      	ldrb	r2, [r2, #6]
 8001586:	8099      	strh	r1, [r3, #4]
 8001588:	719a      	strb	r2, [r3, #6]
	capsulas[4].tempo_agua = 2.7;
 800158a:	463b      	mov	r3, r7
 800158c:	4a68      	ldr	r2, [pc, #416]	; (8001730 <main+0x3a8>)
 800158e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	capsulas[4].temperatura_agua = 60;
 8001592:	463b      	mov	r3, r7
 8001594:	4a6a      	ldr	r2, [pc, #424]	; (8001740 <main+0x3b8>)
 8001596:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	capsulas[4].com_gas = no;
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	capsulas[4].tempo_gas = 0;
 80015a2:	463b      	mov	r3, r7
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	strcpy(capsulas[5].nome, "  Refrigerante  ");
 80015ac:	463b      	mov	r3, r7
 80015ae:	4a65      	ldr	r2, [pc, #404]	; (8001744 <main+0x3bc>)
 80015b0:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80015b4:	4615      	mov	r5, r2
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[5].tipo_agua, "gelada");
 80015be:	463b      	mov	r3, r7
 80015c0:	33ed      	adds	r3, #237	; 0xed
 80015c2:	4a57      	ldr	r2, [pc, #348]	; (8001720 <main+0x398>)
 80015c4:	6810      	ldr	r0, [r2, #0]
 80015c6:	6018      	str	r0, [r3, #0]
 80015c8:	8891      	ldrh	r1, [r2, #4]
 80015ca:	7992      	ldrb	r2, [r2, #6]
 80015cc:	8099      	strh	r1, [r3, #4]
 80015ce:	719a      	strb	r2, [r3, #6]
	capsulas[5].tempo_agua = 4;
 80015d0:	463b      	mov	r3, r7
 80015d2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80015d6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	capsulas[5].temperatura_agua = 17;
 80015da:	463b      	mov	r3, r7
 80015dc:	4a5a      	ldr	r2, [pc, #360]	; (8001748 <main+0x3c0>)
 80015de:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	capsulas[5].com_gas = yes;
 80015e2:	463b      	mov	r3, r7
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	capsulas[5].tempo_gas = 2.56;
 80015ea:	463b      	mov	r3, r7
 80015ec:	4a57      	ldr	r2, [pc, #348]	; (800174c <main+0x3c4>)
 80015ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	strcpy(capsulas[6].nome, "Cap. nao cadast.");
 80015f2:	463b      	mov	r3, r7
 80015f4:	4a56      	ldr	r2, [pc, #344]	; (8001750 <main+0x3c8>)
 80015f6:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80015fa:	4615      	mov	r5, r2
 80015fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[6].tipo_agua, '\0');
 8001604:	463b      	mov	r3, r7
 8001606:	f203 1319 	addw	r3, r3, #281	; 0x119
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fbbf 	bl	8005d90 <strcpy>
	capsulas[6].tempo_agua = 0;
 8001612:	463b      	mov	r3, r7
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	capsulas[6].temperatura_agua = 0;
 800161c:	463b      	mov	r3, r7
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	capsulas[6].com_gas = no;
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	capsulas[6].tempo_gas = 0;
 800162e:	463b      	mov	r3, r7
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

	strcpy(capsulas[7].nome, "Cap. nao cadast.");
 8001638:	463b      	mov	r3, r7
 800163a:	4a45      	ldr	r2, [pc, #276]	; (8001750 <main+0x3c8>)
 800163c:	f503 749a 	add.w	r4, r3, #308	; 0x134
 8001640:	4615      	mov	r5, r2
 8001642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001646:	682b      	ldr	r3, [r5, #0]
 8001648:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[7].tipo_agua, '\0');
 800164a:	463b      	mov	r3, r7
 800164c:	f203 1345 	addw	r3, r3, #325	; 0x145
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fb9c 	bl	8005d90 <strcpy>
	capsulas[7].tempo_agua = 0;
 8001658:	463b      	mov	r3, r7
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	capsulas[7].temperatura_agua = 0;
 8001662:	463b      	mov	r3, r7
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	capsulas[7].com_gas = no;
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	capsulas[7].tempo_gas = 0;
 8001674:	463b      	mov	r3, r7
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	limpar_display();
 800167e:	f7ff fcaf 	bl	8000fe0 <limpar_display>
  while (1)
  {


	  ///leitura da capsula
	  state_Bn1_bit1 = HAL_GPIO_ReadPin(GPIOA, Bn1_bit1);
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <main+0x3cc>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	4833      	ldr	r0, [pc, #204]	; (8001758 <main+0x3d0>)
 800168a:	f002 fdd1 	bl	8004230 <HAL_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <main+0x3d4>)
 8001694:	701a      	strb	r2, [r3, #0]
	  state_Bn1_bit2 = HAL_GPIO_ReadPin(GPIOA, Bn1_bit2);
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <main+0x3d8>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	482e      	ldr	r0, [pc, #184]	; (8001758 <main+0x3d0>)
 800169e:	f002 fdc7 	bl	8004230 <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <main+0x3dc>)
 80016a8:	701a      	strb	r2, [r3, #0]
	  state_Bn1_bit3 = HAL_GPIO_ReadPin(GPIOA, Bn1_bit3);
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <main+0x3e0>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4829      	ldr	r0, [pc, #164]	; (8001758 <main+0x3d0>)
 80016b2:	f002 fdbd 	bl	8004230 <HAL_GPIO_ReadPin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <main+0x3e4>)
 80016bc:	701a      	strb	r2, [r3, #0]
	  Bn1 = (state_Bn1_bit3 * 4) + (state_Bn1_bit2 * 2) + state_Bn1_bit1;
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <main+0x3e4>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	e054      	b.n	8001770 <main+0x3e8>
 80016c6:	bf00      	nop
 80016c8:	200002d4 	.word	0x200002d4
 80016cc:	20000358 	.word	0x20000358
 80016d0:	200003ec 	.word	0x200003ec
 80016d4:	20000288 	.word	0x20000288
 80016d8:	20000234 	.word	0x20000234
 80016dc:	200003e8 	.word	0x200003e8
 80016e0:	08005f9c 	.word	0x08005f9c
 80016e4:	20000220 	.word	0x20000220
 80016e8:	08005f9f 	.word	0x08005f9f
 80016ec:	2000043a 	.word	0x2000043a
 80016f0:	08005fa2 	.word	0x08005fa2
 80016f4:	200002d0 	.word	0x200002d0
 80016f8:	20000022 	.word	0x20000022
 80016fc:	20000024 	.word	0x20000024
 8001700:	2000001a 	.word	0x2000001a
 8001704:	2000001c 	.word	0x2000001c
 8001708:	2000001e 	.word	0x2000001e
 800170c:	20000020 	.word	0x20000020
 8001710:	08005fa8 	.word	0x08005fa8
 8001714:	08005fbc 	.word	0x08005fbc
 8001718:	08005fd0 	.word	0x08005fd0
 800171c:	08005fe4 	.word	0x08005fe4
 8001720:	08005ff8 	.word	0x08005ff8
 8001724:	40400000 	.word	0x40400000
 8001728:	41700000 	.word	0x41700000
 800172c:	08006000 	.word	0x08006000
 8001730:	402ccccd 	.word	0x402ccccd
 8001734:	41a00000 	.word	0x41a00000
 8001738:	08006014 	.word	0x08006014
 800173c:	08006028 	.word	0x08006028
 8001740:	42700000 	.word	0x42700000
 8001744:	08006030 	.word	0x08006030
 8001748:	41880000 	.word	0x41880000
 800174c:	4023d70a 	.word	0x4023d70a
 8001750:	08006044 	.word	0x08006044
 8001754:	2000000c 	.word	0x2000000c
 8001758:	40010800 	.word	0x40010800
 800175c:	20000281 	.word	0x20000281
 8001760:	2000000e 	.word	0x2000000e
 8001764:	20000434 	.word	0x20000434
 8001768:	20000010 	.word	0x20000010
 800176c:	20000470 	.word	0x20000470
 8001770:	4aad      	ldr	r2, [pc, #692]	; (8001a28 <main+0x6a0>)
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	4413      	add	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4bab      	ldr	r3, [pc, #684]	; (8001a2c <main+0x6a4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4413      	add	r3, r2
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4baa      	ldr	r3, [pc, #680]	; (8001a30 <main+0x6a8>)
 8001786:	701a      	strb	r2, [r3, #0]

	  ////Leitura pressostato/////
	  state_P1 = HAL_GPIO_ReadPin(GPIOB, P1);
 8001788:	4baa      	ldr	r3, [pc, #680]	; (8001a34 <main+0x6ac>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	48aa      	ldr	r0, [pc, #680]	; (8001a38 <main+0x6b0>)
 8001790:	f002 fd4e 	bl	8004230 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	4ba8      	ldr	r3, [pc, #672]	; (8001a3c <main+0x6b4>)
 800179a:	701a      	strb	r2, [r3, #0]
	  state_P2 = HAL_GPIO_ReadPin(GPIOB, P2);
 800179c:	4ba8      	ldr	r3, [pc, #672]	; (8001a40 <main+0x6b8>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	48a5      	ldr	r0, [pc, #660]	; (8001a38 <main+0x6b0>)
 80017a4:	f002 fd44 	bl	8004230 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4ba5      	ldr	r3, [pc, #660]	; (8001a44 <main+0x6bc>)
 80017ae:	701a      	strb	r2, [r3, #0]


	  if(state_P1){//se o filtro estiver limpo
 80017b0:	4ba2      	ldr	r3, [pc, #648]	; (8001a3c <main+0x6b4>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00c      	beq.n	80017d2 <main+0x44a>
		  escrever_texto_display(0x80, capsulas[Bn1].nome);
 80017b8:	4b9d      	ldr	r3, [pc, #628]	; (8001a30 <main+0x6a8>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	463a      	mov	r2, r7
 80017c0:	232c      	movs	r3, #44	; 0x2c
 80017c2:	fb03 f301 	mul.w	r3, r3, r1
 80017c6:	4413      	add	r3, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	2080      	movs	r0, #128	; 0x80
 80017cc:	f7ff fc92 	bl	80010f4 <escrever_texto_display>
 80017d0:	e006      	b.n	80017e0 <main+0x458>
	  }else{

		  escrever_texto_display(0x80, "Filt. agua satu.");
 80017d2:	499d      	ldr	r1, [pc, #628]	; (8001a48 <main+0x6c0>)
 80017d4:	2080      	movs	r0, #128	; 0x80
 80017d6:	f7ff fc8d 	bl	80010f4 <escrever_texto_display>
		  estado = 0;
 80017da:	4b9c      	ldr	r3, [pc, #624]	; (8001a4c <main+0x6c4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
	  }
	  if(capsulas[Bn1].com_gas == yes && !state_P2 && state_P1){//se o cinlintro de c02 estiver vazio e for inserida uma capsula q usa gas
 80017e0:	4b93      	ldr	r3, [pc, #588]	; (8001a30 <main+0x6a8>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	463a      	mov	r2, r7
 80017e8:	232c      	movs	r3, #44	; 0x2c
 80017ea:	fb03 f301 	mul.w	r3, r3, r1
 80017ee:	4413      	add	r3, r2
 80017f0:	3324      	adds	r3, #36	; 0x24
 80017f2:	f993 3000 	ldrsb.w	r3, [r3]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d116      	bne.n	8001828 <main+0x4a0>
 80017fa:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <main+0x6bc>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d112      	bne.n	8001828 <main+0x4a0>
 8001802:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <main+0x6b4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00e      	beq.n	8001828 <main+0x4a0>
		  HAL_Delay(2000);
 800180a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800180e:	f001 fc49 	bl	80030a4 <HAL_Delay>
		  escrever_texto_display(0x80, "Cilin. CO2 vazio");
 8001812:	498f      	ldr	r1, [pc, #572]	; (8001a50 <main+0x6c8>)
 8001814:	2080      	movs	r0, #128	; 0x80
 8001816:	f7ff fc6d 	bl	80010f4 <escrever_texto_display>
		  HAL_Delay(2000);
 800181a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800181e:	f001 fc41 	bl	80030a4 <HAL_Delay>
		  estado = 0;
 8001822:	4b8a      	ldr	r3, [pc, #552]	; (8001a4c <main+0x6c4>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
	  }
	  if((Bn1 == 0 && !state_P2) ||(!state_P1 && !state_P2)){//se o cinlintro de c02 estiver vazio e não tiver capsulas inseridas
 8001828:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <main+0x6a8>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d103      	bne.n	8001838 <main+0x4b0>
 8001830:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <main+0x6bc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <main+0x4c0>
 8001838:	4b80      	ldr	r3, [pc, #512]	; (8001a3c <main+0x6b4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11f      	bne.n	8001880 <main+0x4f8>
 8001840:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <main+0x6bc>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11b      	bne.n	8001880 <main+0x4f8>
		  if(!state_P1 && !state_P2)HAL_Delay(2000);
 8001848:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <main+0x6b4>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <main+0x4d8>
 8001850:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <main+0x6bc>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <main+0x4d8>
 8001858:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800185c:	f001 fc22 	bl	80030a4 <HAL_Delay>
		  escrever_texto_display(0x80, "Cilin. CO2 vazio");
 8001860:	497b      	ldr	r1, [pc, #492]	; (8001a50 <main+0x6c8>)
 8001862:	2080      	movs	r0, #128	; 0x80
 8001864:	f7ff fc46 	bl	80010f4 <escrever_texto_display>
		  if(!state_P1 && !state_P2)HAL_Delay(2000);
 8001868:	4b74      	ldr	r3, [pc, #464]	; (8001a3c <main+0x6b4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <main+0x4f8>
 8001870:	4b74      	ldr	r3, [pc, #464]	; (8001a44 <main+0x6bc>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d103      	bne.n	8001880 <main+0x4f8>
 8001878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800187c:	f001 fc12 	bl	80030a4 <HAL_Delay>
	  }


	  switch(estado){
 8001880:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <main+0x6c4>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b05      	cmp	r3, #5
 8001886:	f63f aefc 	bhi.w	8001682 <main+0x2fa>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <main+0x508>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	080018a9 	.word	0x080018a9
 8001894:	0800197b 	.word	0x0800197b
 8001898:	08001aef 	.word	0x08001aef
 800189c:	08001eb1 	.word	0x08001eb1
 80018a0:	08002117 	.word	0x08002117
 80018a4:	08002131 	.word	0x08002131

	  	  	  	  case 0://verificação inicial da capsula e relogio
	  	  	  		  //mostra a hora
	  	  	  		  escrever_texto_display(0xC0, "    ");
 80018a8:	496a      	ldr	r1, [pc, #424]	; (8001a54 <main+0x6cc>)
 80018aa:	20c0      	movs	r0, #192	; 0xc0
 80018ac:	f7ff fc22 	bl	80010f4 <escrever_texto_display>
	  	  	  		  if(horas < 10){
 80018b0:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <main+0x6d0>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d80e      	bhi.n	80018d6 <main+0x54e>
	  	  	  			  escrever_texto_display(0xC4, "0");
 80018b8:	4968      	ldr	r1, [pc, #416]	; (8001a5c <main+0x6d4>)
 80018ba:	20c4      	movs	r0, #196	; 0xc4
 80018bc:	f7ff fc1a 	bl	80010f4 <escrever_texto_display>
	  	  	  			  escrever_numero_display(0xC5, horas);
 80018c0:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <main+0x6d0>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	20c5      	movs	r0, #197	; 0xc5
 80018c8:	f7ff fc8c 	bl	80011e4 <escrever_numero_display>
	  	  	  			  escrever_texto_display(0xC6, ":");
 80018cc:	4964      	ldr	r1, [pc, #400]	; (8001a60 <main+0x6d8>)
 80018ce:	20c6      	movs	r0, #198	; 0xc6
 80018d0:	f7ff fc10 	bl	80010f4 <escrever_texto_display>
 80018d4:	e009      	b.n	80018ea <main+0x562>
	  	  	  		  }else{
		  	  	  		  escrever_numero_display(0xC4, horas);
 80018d6:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <main+0x6d0>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4619      	mov	r1, r3
 80018dc:	20c4      	movs	r0, #196	; 0xc4
 80018de:	f7ff fc81 	bl	80011e4 <escrever_numero_display>
		  	  	  		  escrever_texto_display(0xC6, ":");
 80018e2:	495f      	ldr	r1, [pc, #380]	; (8001a60 <main+0x6d8>)
 80018e4:	20c6      	movs	r0, #198	; 0xc6
 80018e6:	f7ff fc05 	bl	80010f4 <escrever_texto_display>
	  	  	  		  }
	  	  	  		  if(minutos < 10){
 80018ea:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <main+0x6dc>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	d80e      	bhi.n	8001910 <main+0x588>
	  	  	  			  escrever_texto_display(0xC7, "0");
 80018f2:	495a      	ldr	r1, [pc, #360]	; (8001a5c <main+0x6d4>)
 80018f4:	20c7      	movs	r0, #199	; 0xc7
 80018f6:	f7ff fbfd 	bl	80010f4 <escrever_texto_display>
	  	  	  			  escrever_numero_display(0xC8, minutos);
 80018fa:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <main+0x6dc>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	20c8      	movs	r0, #200	; 0xc8
 8001902:	f7ff fc6f 	bl	80011e4 <escrever_numero_display>
	  	  	  		  	  escrever_texto_display(0xC9, ":");
 8001906:	4956      	ldr	r1, [pc, #344]	; (8001a60 <main+0x6d8>)
 8001908:	20c9      	movs	r0, #201	; 0xc9
 800190a:	f7ff fbf3 	bl	80010f4 <escrever_texto_display>
 800190e:	e009      	b.n	8001924 <main+0x59c>
	  	  	  		  }else{
	  	  	  			  escrever_numero_display(0xC7, minutos);
 8001910:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <main+0x6dc>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	20c7      	movs	r0, #199	; 0xc7
 8001918:	f7ff fc64 	bl	80011e4 <escrever_numero_display>
	  	  	  		  	  escrever_texto_display(0xC9, ":");
 800191c:	4950      	ldr	r1, [pc, #320]	; (8001a60 <main+0x6d8>)
 800191e:	20c9      	movs	r0, #201	; 0xc9
 8001920:	f7ff fbe8 	bl	80010f4 <escrever_texto_display>
	  	  	  		  }
	  	  	  		  if(segundos < 10){
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <main+0x6e0>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b09      	cmp	r3, #9
 800192a:	d80a      	bhi.n	8001942 <main+0x5ba>
	  	  	  			  escrever_texto_display(0xCA, "0");
 800192c:	494b      	ldr	r1, [pc, #300]	; (8001a5c <main+0x6d4>)
 800192e:	20ca      	movs	r0, #202	; 0xca
 8001930:	f7ff fbe0 	bl	80010f4 <escrever_texto_display>
	  	  	  			  escrever_numero_display(0xCB, segundos);
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <main+0x6e0>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	20cb      	movs	r0, #203	; 0xcb
 800193c:	f7ff fc52 	bl	80011e4 <escrever_numero_display>
 8001940:	e005      	b.n	800194e <main+0x5c6>
	  	  	  		  }else{
	  	  	  			  escrever_numero_display(0xCA, segundos);
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <main+0x6e0>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	20ca      	movs	r0, #202	; 0xca
 800194a:	f7ff fc4b 	bl	80011e4 <escrever_numero_display>
	  	  	  		  }
	  	  	  		  escrever_texto_display(0xCC, "    ");
 800194e:	4941      	ldr	r1, [pc, #260]	; (8001a54 <main+0x6cc>)
 8001950:	20cc      	movs	r0, #204	; 0xcc
 8001952:	f7ff fbcf 	bl	80010f4 <escrever_texto_display>


	  	  	  		  if(Bn1 != 0 && state_P1){
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <main+0x6a8>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <main+0x5e8>
 800195e:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <main+0x6b4>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <main+0x5e8>
	  	  	  			  estado = 1;
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <main+0x6c4>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
	  	  	  		  }else{
	  	  	  			  state_relogio = 0;
	  	  	  		  }
					  break;
 800196c:	f000 bcb7 	b.w	80022de <main+0xf56>
	  	  	  			  state_relogio = 0;
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <main+0x6e4>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
					  break;
 8001976:	f000 bcb2 	b.w	80022de <main+0xf56>

	              case 1://detecta qual o tipo da capsula e confima se esta cadastrada

	            	  if(strcmp(capsulas[Bn1].nome, "Cap. nao cadast.") == 0 ||  Bn1 == 0){//se a capsula não estiver cadastrada ou não tiver capsula
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <main+0x6a8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	463a      	mov	r2, r7
 8001982:	232c      	movs	r3, #44	; 0x2c
 8001984:	fb03 f301 	mul.w	r3, r3, r1
 8001988:	4413      	add	r3, r2
 800198a:	4939      	ldr	r1, [pc, #228]	; (8001a70 <main+0x6e8>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fbdf 	bl	8000150 <strcmp>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <main+0x618>
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <main+0x6a8>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d107      	bne.n	80019b0 <main+0x628>
						estado = 0;
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <main+0x6c4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
						state_relogio = 0;
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <main+0x6e4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
						break;
 80019ac:	f000 bc97 	b.w	80022de <main+0xf56>
	            	  }

					  if(capsulas[Bn1].com_gas == yes && !state_P2){//se o cinlintro de c02 estiver vazio
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <main+0x6a8>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	463a      	mov	r2, r7
 80019b8:	232c      	movs	r3, #44	; 0x2c
 80019ba:	fb03 f301 	mul.w	r3, r3, r1
 80019be:	4413      	add	r3, r2
 80019c0:	3324      	adds	r3, #36	; 0x24
 80019c2:	f993 3000 	ldrsb.w	r3, [r3]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <main+0x654>
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <main+0x6bc>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d104      	bne.n	80019dc <main+0x654>
							estado = 0;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <main+0x6c4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
							break;
 80019d8:	f000 bc81 	b.w	80022de <main+0xf56>
					  }

					  if(strcmp(capsulas[Bn1].nome, "      Agua      ") == 0 && selecao == -1){
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <main+0x6a8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	463a      	mov	r2, r7
 80019e4:	232c      	movs	r3, #44	; 0x2c
 80019e6:	fb03 f301 	mul.w	r3, r3, r1
 80019ea:	4413      	add	r3, r2
 80019ec:	4921      	ldr	r1, [pc, #132]	; (8001a74 <main+0x6ec>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fbae 	bl	8000150 <strcmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10d      	bne.n	8001a16 <main+0x68e>
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <main+0x6f0>)
 80019fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d107      	bne.n	8001a16 <main+0x68e>
						  estado = 5;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <main+0x6c4>)
 8001a08:	2205      	movs	r2, #5
 8001a0a:	701a      	strb	r2, [r3, #0]
						  selecao = 0;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <main+0x6f0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
						  break;
 8001a12:	f000 bc64 	b.w	80022de <main+0xf56>
					  }


					  if(state_relogio){
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <main+0x6e4>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d02e      	beq.n	8001a7c <main+0x6f4>
						  estado = 0;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <main+0x6c4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e02e      	b.n	8001a84 <main+0x6fc>
 8001a26:	bf00      	nop
 8001a28:	20000434 	.word	0x20000434
 8001a2c:	20000281 	.word	0x20000281
 8001a30:	20000282 	.word	0x20000282
 8001a34:	20000000 	.word	0x20000000
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	200003e5 	.word	0x200003e5
 8001a40:	20000002 	.word	0x20000002
 8001a44:	200003e4 	.word	0x200003e4
 8001a48:	08006058 	.word	0x08006058
 8001a4c:	20000280 	.word	0x20000280
 8001a50:	0800606c 	.word	0x0800606c
 8001a54:	08006080 	.word	0x08006080
 8001a58:	20000220 	.word	0x20000220
 8001a5c:	08006088 	.word	0x08006088
 8001a60:	0800608c 	.word	0x0800608c
 8001a64:	2000043a 	.word	0x2000043a
 8001a68:	200002d0 	.word	0x200002d0
 8001a6c:	20000222 	.word	0x20000222
 8001a70:	08006044 	.word	0x08006044
 8001a74:	08005fd0 	.word	0x08005fd0
 8001a78:	20000026 	.word	0x20000026
					  }else{
						  escrever_texto_display(0xC0, " S para iniciar ");
 8001a7c:	49a4      	ldr	r1, [pc, #656]	; (8001d10 <main+0x988>)
 8001a7e:	20c0      	movs	r0, #192	; 0xc0
 8001a80:	f7ff fb38 	bl	80010f4 <escrever_texto_display>
					  }

					  if(state_btn_s){
 8001a84:	4ba3      	ldr	r3, [pc, #652]	; (8001d14 <main+0x98c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d027      	beq.n	8001adc <main+0x754>
						  if(strcmp(capsulas[Bn1].nome, "      Agua      ") == 0 && selecao == 4){//caso o usuario tenha inserido a capsula de agua e nao selecionato o tipo de agua
 8001a8c:	4ba2      	ldr	r3, [pc, #648]	; (8001d18 <main+0x990>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	463a      	mov	r2, r7
 8001a94:	232c      	movs	r3, #44	; 0x2c
 8001a96:	fb03 f301 	mul.w	r3, r3, r1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	499f      	ldr	r1, [pc, #636]	; (8001d1c <main+0x994>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fb56 	bl	8000150 <strcmp>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <main+0x742>
 8001aaa:	4b9d      	ldr	r3, [pc, #628]	; (8001d20 <main+0x998>)
 8001aac:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d10a      	bne.n	8001aca <main+0x742>
							  estado = 5;
 8001ab4:	4b9b      	ldr	r3, [pc, #620]	; (8001d24 <main+0x99c>)
 8001ab6:	2205      	movs	r2, #5
 8001ab8:	701a      	strb	r2, [r3, #0]
							  state_btn_s = 0;
 8001aba:	4b96      	ldr	r3, [pc, #600]	; (8001d14 <main+0x98c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
							  state_relogio = 0;
 8001ac0:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <main+0x9a0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
							  break;
 8001ac6:	f000 bc0a 	b.w	80022de <main+0xf56>
						  }else{
							  selecao = -1;
 8001aca:	4b95      	ldr	r3, [pc, #596]	; (8001d20 <main+0x998>)
 8001acc:	22ff      	movs	r2, #255	; 0xff
 8001ace:	701a      	strb	r2, [r3, #0]
						  }
						  estado = 2;
 8001ad0:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <main+0x99c>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	701a      	strb	r2, [r3, #0]
						  state_relogio = 0;
 8001ad6:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <main+0x9a0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
						}
					  if(state_btn_c){
 8001adc:	4b93      	ldr	r3, [pc, #588]	; (8001d2c <main+0x9a4>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 83f2 	beq.w	80022ca <main+0xf42>
						  state_relogio = 1;
 8001ae6:	4b90      	ldr	r3, [pc, #576]	; (8001d28 <main+0x9a0>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
					}

	                  break;
 8001aec:	e3ed      	b.n	80022ca <main+0xf42>

	              case 2://tipo de agua

	            	  //leitura das temperaturas ////
	            	  	  T1 = 0;
 8001aee:	4b90      	ldr	r3, [pc, #576]	; (8001d30 <main+0x9a8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	801a      	strh	r2, [r3, #0]
	            	  	  T2 = 0;
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <main+0x9ac>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	801a      	strh	r2, [r3, #0]
	            	  	  for(j=0; j < 6; j++){//le 6 vezes os 12 canias para ter 36 amostra de cada sensor de temperatura
 8001afa:	4b8f      	ldr	r3, [pc, #572]	; (8001d38 <main+0x9b0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e08f      	b.n	8001c22 <main+0x89a>
	            	  		  HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSION);
 8001b02:	220c      	movs	r2, #12
 8001b04:	498d      	ldr	r1, [pc, #564]	; (8001d3c <main+0x9b4>)
 8001b06:	488e      	ldr	r0, [pc, #568]	; (8001d40 <main+0x9b8>)
 8001b08:	f001 fbc6 	bl	8003298 <HAL_ADC_Start_DMA>
	            	  		  while(!adcDataReady){}
 8001b0c:	bf00      	nop
 8001b0e:	4b8d      	ldr	r3, [pc, #564]	; (8001d44 <main+0x9bc>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0fb      	beq.n	8001b0e <main+0x786>
	            	  		  if(adcDataReady){
 8001b16:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <main+0x9bc>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d07c      	beq.n	8001c18 <main+0x890>
	            	  			  adcDataReady = 0;
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <main+0x9bc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
	            	  			  aux1 = 0;
 8001b24:	4b88      	ldr	r3, [pc, #544]	; (8001d48 <main+0x9c0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	801a      	strh	r2, [r3, #0]
	            	  			  aux1 = 0;
 8001b2a:	4b87      	ldr	r3, [pc, #540]	; (8001d48 <main+0x9c0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	801a      	strh	r2, [r3, #0]
	            	  			  for(i=0; i < NUMBER_OF_CONVERSION; i++){
 8001b30:	4b86      	ldr	r3, [pc, #536]	; (8001d4c <main+0x9c4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e021      	b.n	8001b7c <main+0x7f4>
	            	  				  if(i<6){
 8001b38:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <main+0x9c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	dc0c      	bgt.n	8001b5a <main+0x7d2>
	            	  					  aux1 += adcData[i];
 8001b40:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <main+0x9c4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a7d      	ldr	r2, [pc, #500]	; (8001d3c <main+0x9b4>)
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <main+0x9c0>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <main+0x9c0>)
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	e00b      	b.n	8001b72 <main+0x7ea>
	            	  				  }else{
	            	  					  aux2 += adcData[i];
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <main+0x9c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <main+0x9b4>)
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <main+0x9c8>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <main+0x9c8>)
 8001b70:	801a      	strh	r2, [r3, #0]
	            	  			  for(i=0; i < NUMBER_OF_CONVERSION; i++){
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <main+0x9c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a74      	ldr	r2, [pc, #464]	; (8001d4c <main+0x9c4>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <main+0x9c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b0b      	cmp	r3, #11
 8001b82:	ddd9      	ble.n	8001b38 <main+0x7b0>
	            	  				  }
	            	  			  }
	            	  			  aux1 /= (NUMBER_OF_CONVERSION/2);
 8001b84:	4b70      	ldr	r3, [pc, #448]	; (8001d48 <main+0x9c0>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	4a72      	ldr	r2, [pc, #456]	; (8001d54 <main+0x9cc>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <main+0x9c0>)
 8001b94:	801a      	strh	r2, [r3, #0]
	            	  			  aux2 /= (NUMBER_OF_CONVERSION/2);
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <main+0x9c8>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <main+0x9cc>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <main+0x9c8>)
 8001ba6:	801a      	strh	r2, [r3, #0]
	            	  			  aux1 *= scala_temperatura;
 8001ba8:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <main+0x9c0>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc2b 	bl	8000408 <__aeabi_i2d>
 8001bb2:	a355      	add	r3, pc, #340	; (adr r3, 8001d08 <main+0x980>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fc90 	bl	80004dc <__aeabi_dmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	f7fe fe9c 	bl	8000900 <__aeabi_d2uiz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b5e      	ldr	r3, [pc, #376]	; (8001d48 <main+0x9c0>)
 8001bce:	801a      	strh	r2, [r3, #0]
	            	  			  aux2 *= scala_temperatura;
 8001bd0:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <main+0x9c8>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc17 	bl	8000408 <__aeabi_i2d>
 8001bda:	a34b      	add	r3, pc, #300	; (adr r3, 8001d08 <main+0x980>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fc7c 	bl	80004dc <__aeabi_dmul>
 8001be4:	4603      	mov	r3, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	4618      	mov	r0, r3
 8001bea:	4621      	mov	r1, r4
 8001bec:	f7fe fe88 	bl	8000900 <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <main+0x9c8>)
 8001bf6:	801a      	strh	r2, [r3, #0]
	            	  			  T1 += aux1;
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <main+0x9a8>)
 8001bfa:	881a      	ldrh	r2, [r3, #0]
 8001bfc:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <main+0x9c0>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <main+0x9a8>)
 8001c06:	801a      	strh	r2, [r3, #0]
	            	  			  T2 += aux2;
 8001c08:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <main+0x9ac>)
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <main+0x9c8>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <main+0x9ac>)
 8001c16:	801a      	strh	r2, [r3, #0]
	            	  	  for(j=0; j < 6; j++){//le 6 vezes os 12 canias para ter 36 amostra de cada sensor de temperatura
 8001c18:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <main+0x9b0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a46      	ldr	r2, [pc, #280]	; (8001d38 <main+0x9b0>)
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b45      	ldr	r3, [pc, #276]	; (8001d38 <main+0x9b0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	f77f af6b 	ble.w	8001b02 <main+0x77a>
	            	  		  }
	            	  	  }
	            	  	  T1 /= 6;
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <main+0x9a8>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <main+0x9cc>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <main+0x9a8>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	            	  	  T2 /= 6;
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <main+0x9ac>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	4a44      	ldr	r2, [pc, #272]	; (8001d54 <main+0x9cc>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <main+0x9ac>)
 8001c4e:	801a      	strh	r2, [r3, #0]
	            	  	  if(T1 > 100) T1 = 100;
 8001c50:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <main+0x9a8>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d902      	bls.n	8001c5e <main+0x8d6>
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <main+0x9a8>)
 8001c5a:	2264      	movs	r2, #100	; 0x64
 8001c5c:	801a      	strh	r2, [r3, #0]
	            	  	  if(T1 < 5) T1 = 5;
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <main+0x9a8>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d802      	bhi.n	8001c6c <main+0x8e4>
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <main+0x9a8>)
 8001c68:	2205      	movs	r2, #5
 8001c6a:	801a      	strh	r2, [r3, #0]
	            	  	  if(T2 > 50) T2 = 50;
 8001c6c:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <main+0x9ac>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	2b32      	cmp	r3, #50	; 0x32
 8001c72:	d902      	bls.n	8001c7a <main+0x8f2>
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <main+0x9ac>)
 8001c76:	2232      	movs	r2, #50	; 0x32
 8001c78:	801a      	strh	r2, [r3, #0]
	            	  	  if(T2 < 5) T2 = 5;
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <main+0x9ac>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d802      	bhi.n	8001c88 <main+0x900>
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <main+0x9ac>)
 8001c84:	2205      	movs	r2, #5
 8001c86:	801a      	strh	r2, [r3, #0]

	                  if(strcmp(capsulas[Bn1].tipo_agua, "quente") == 0){
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <main+0x990>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	463a      	mov	r2, r7
 8001c90:	232c      	movs	r3, #44	; 0x2c
 8001c92:	fb03 f301 	mul.w	r3, r3, r1
 8001c96:	3310      	adds	r3, #16
 8001c98:	4413      	add	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	492e      	ldr	r1, [pc, #184]	; (8001d58 <main+0x9d0>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fa56 	bl	8000150 <strcmp>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 808c 	bne.w	8001dc4 <main+0xa3c>

	        			  escrever_texto_display(0xC0, " Aquecendo agua ");
 8001cac:	492b      	ldr	r1, [pc, #172]	; (8001d5c <main+0x9d4>)
 8001cae:	20c0      	movs	r0, #192	; 0xc0
 8001cb0:	f7ff fa20 	bl	80010f4 <escrever_texto_display>
	        			  if(T1 >= capsulas[Bn1].temperatura_agua){
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <main+0x9a8>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fefb 	bl	8000ab4 <__aeabi_i2f>
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <main+0x990>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	463a      	mov	r2, r7
 8001cc6:	232c      	movs	r3, #44	; 0x2c
 8001cc8:	fb03 f301 	mul.w	r3, r3, r1
 8001ccc:	4413      	add	r3, r2
 8001cce:	3320      	adds	r3, #32
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7ff f8f4 	bl	8000ec0 <__aeabi_fcmpge>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d046      	beq.n	8001d6c <main+0x9e4>
	        			  	  HAL_GPIO_WritePin(GPIOB, Y1, GPIO_PIN_SET);//abre valvula
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <main+0x9d8>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481f      	ldr	r0, [pc, #124]	; (8001d64 <main+0x9dc>)
 8001ce8:	f002 fab9 	bl	800425e <HAL_GPIO_WritePin>
	        				  estado = 3;
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <main+0x99c>)
 8001cee:	2203      	movs	r2, #3
 8001cf0:	701a      	strb	r2, [r3, #0]
	        				  dutyCycle_TIM2_CH1 = 0;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <main+0x9e0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
	        				  TIM2->CCR1 = dutyCycle_TIM2_CH1;
 8001cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <main+0x9e0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6353      	str	r3, [r2, #52]	; 0x34
 8001d02:	e05f      	b.n	8001dc4 <main+0xa3c>
 8001d04:	f3af 8000 	nop.w
 8001d08:	14a14a15 	.word	0x14a14a15
 8001d0c:	3fc4a14a 	.word	0x3fc4a14a
 8001d10:	08006090 	.word	0x08006090
 8001d14:	20000283 	.word	0x20000283
 8001d18:	20000282 	.word	0x20000282
 8001d1c:	08005fd0 	.word	0x08005fd0
 8001d20:	20000026 	.word	0x20000026
 8001d24:	20000280 	.word	0x20000280
 8001d28:	20000222 	.word	0x20000222
 8001d2c:	2000022c 	.word	0x2000022c
 8001d30:	20000354 	.word	0x20000354
 8001d34:	20000224 	.word	0x20000224
 8001d38:	20000228 	.word	0x20000228
 8001d3c:	20000440 	.word	0x20000440
 8001d40:	200002d4 	.word	0x200002d4
 8001d44:	20000438 	.word	0x20000438
 8001d48:	2000043c 	.word	0x2000043c
 8001d4c:	20000304 	.word	0x20000304
 8001d50:	200002d2 	.word	0x200002d2
 8001d54:	aaaaaaab 	.word	0xaaaaaaab
 8001d58:	08006028 	.word	0x08006028
 8001d5c:	080060a4 	.word	0x080060a4
 8001d60:	20000004 	.word	0x20000004
 8001d64:	40010c00 	.word	0x40010c00
 8001d68:	2000027c 	.word	0x2000027c
	        			  }else{
	        				  dutyCycle_TIM2_CH1 = (100-((T1*100)/capsulas[Bn1].temperatura_agua))*(MAX_DUTY_CYCLE_VALUE_TIM2/100);//Equação para o controle proporcional da resitencia
 8001d6c:	4b9f      	ldr	r3, [pc, #636]	; (8001fec <main+0xc64>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	2364      	movs	r3, #100	; 0x64
 8001d74:	fb03 f302 	mul.w	r3, r3, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fe9b 	bl	8000ab4 <__aeabi_i2f>
 8001d7e:	4b9c      	ldr	r3, [pc, #624]	; (8001ff0 <main+0xc68>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	463a      	mov	r2, r7
 8001d86:	232c      	movs	r3, #44	; 0x2c
 8001d88:	fb03 f301 	mul.w	r3, r3, r1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3320      	adds	r3, #32
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe ff96 	bl	8000cc4 <__aeabi_fdiv>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4895      	ldr	r0, [pc, #596]	; (8001ff4 <main+0xc6c>)
 8001d9e:	f7fe fdd3 	bl	8000948 <__aeabi_fsub>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4994      	ldr	r1, [pc, #592]	; (8001ff8 <main+0xc70>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fed8 	bl	8000b5c <__aeabi_fmul>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f89a 	bl	8000ee8 <__aeabi_f2uiz>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <main+0xc74>)
 8001db8:	601a      	str	r2, [r3, #0]
	        				  TIM2->CCR1 = dutyCycle_TIM2_CH1;
 8001dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dbe:	4b8f      	ldr	r3, [pc, #572]	; (8001ffc <main+0xc74>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6353      	str	r3, [r2, #52]	; 0x34
	        			  }
	                  }
	                  if(strcmp(capsulas[Bn1].tipo_agua, "gelada") == 0){
 8001dc4:	4b8a      	ldr	r3, [pc, #552]	; (8001ff0 <main+0xc68>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	463a      	mov	r2, r7
 8001dcc:	232c      	movs	r3, #44	; 0x2c
 8001dce:	fb03 f301 	mul.w	r3, r3, r1
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4989      	ldr	r1, [pc, #548]	; (8002000 <main+0xc78>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe f9b8 	bl	8000150 <strcmp>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d143      	bne.n	8001e6e <main+0xae6>

	        			  escrever_texto_display(0xC0, "  Gelando agua  ");
 8001de6:	4987      	ldr	r1, [pc, #540]	; (8002004 <main+0xc7c>)
 8001de8:	20c0      	movs	r0, #192	; 0xc0
 8001dea:	f7ff f983 	bl	80010f4 <escrever_texto_display>
	        			  if(T2 <= capsulas[Bn1].temperatura_agua){
 8001dee:	4b86      	ldr	r3, [pc, #536]	; (8002008 <main+0xc80>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fe5e 	bl	8000ab4 <__aeabi_i2f>
 8001df8:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <main+0xc68>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	463a      	mov	r2, r7
 8001e00:	232c      	movs	r3, #44	; 0x2c
 8001e02:	fb03 f301 	mul.w	r3, r3, r1
 8001e06:	4413      	add	r3, r2
 8001e08:	3320      	adds	r3, #32
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7ff f84d 	bl	8000eac <__aeabi_fcmple>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <main+0xab6>
	        			  	  HAL_GPIO_WritePin(GPIOB, Y2, GPIO_PIN_SET);//abre valvula
 8001e18:	4b7c      	ldr	r3, [pc, #496]	; (800200c <main+0xc84>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	487b      	ldr	r0, [pc, #492]	; (8002010 <main+0xc88>)
 8001e22:	f002 fa1c 	bl	800425e <HAL_GPIO_WritePin>
	        				  estado = 3;
 8001e26:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <main+0xc8c>)
 8001e28:	2203      	movs	r2, #3
 8001e2a:	701a      	strb	r2, [r3, #0]
	        				  dutyCycle_TIM2_CH2 = 0;
 8001e2c:	4b7a      	ldr	r3, [pc, #488]	; (8002018 <main+0xc90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
	        				  TIM2->CCR2 = dutyCycle_TIM2_CH2;
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e36:	4b78      	ldr	r3, [pc, #480]	; (8002018 <main+0xc90>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6393      	str	r3, [r2, #56]	; 0x38
 8001e3c:	e017      	b.n	8001e6e <main+0xae6>
	        			  }else{
	        				  dutyCycle_TIM2_CH2 = ((T2*100)/50)*(MAX_DUTY_CYCLE_VALUE_TIM2/100);//Equação para o controle proporcional do compressor
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <main+0xc80>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	2364      	movs	r3, #100	; 0x64
 8001e46:	fb03 f302 	mul.w	r3, r3, r2
 8001e4a:	4a74      	ldr	r2, [pc, #464]	; (800201c <main+0xc94>)
 8001e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e50:	1112      	asrs	r2, r2, #4
 8001e52:	17db      	asrs	r3, r3, #31
 8001e54:	1ad2      	subs	r2, r2, r3
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <main+0xc90>)
 8001e62:	601a      	str	r2, [r3, #0]
	        				  TIM2->CCR2 = dutyCycle_TIM2_CH2;
 8001e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e68:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <main+0xc90>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6393      	str	r3, [r2, #56]	; 0x38
	        			  }
	                  }
	                  if(strcmp(capsulas[Bn1].tipo_agua, "natural") == 0){
 8001e6e:	4b60      	ldr	r3, [pc, #384]	; (8001ff0 <main+0xc68>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	4619      	mov	r1, r3
 8001e74:	463a      	mov	r2, r7
 8001e76:	232c      	movs	r3, #44	; 0x2c
 8001e78:	fb03 f301 	mul.w	r3, r3, r1
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	4413      	add	r3, r2
 8001e80:	3301      	adds	r3, #1
 8001e82:	4967      	ldr	r1, [pc, #412]	; (8002020 <main+0xc98>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f963 	bl	8000150 <strcmp>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 821f 	bne.w	80022d0 <main+0xf48>

	                	  escrever_texto_display(0xC0, "  Agua natural  ");
 8001e92:	4964      	ldr	r1, [pc, #400]	; (8002024 <main+0xc9c>)
 8001e94:	20c0      	movs	r0, #192	; 0xc0
 8001e96:	f7ff f92d 	bl	80010f4 <escrever_texto_display>
	                  	  HAL_GPIO_WritePin(GPIOB, Y3, GPIO_PIN_SET);//abre valvula
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <main+0xca0>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	485b      	ldr	r0, [pc, #364]	; (8002010 <main+0xc88>)
 8001ea4:	f002 f9db 	bl	800425e <HAL_GPIO_WritePin>
	                	  estado = 3;
 8001ea8:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <main+0xc8c>)
 8001eaa:	2203      	movs	r2, #3
 8001eac:	701a      	strb	r2, [r3, #0]
	                  }
	                  break;
 8001eae:	e20f      	b.n	80022d0 <main+0xf48>

	              case 3://ativa bomba e CO2

        			  escrever_texto_display(0xC0, "Preparando drink");
 8001eb0:	495e      	ldr	r1, [pc, #376]	; (800202c <main+0xca4>)
 8001eb2:	20c0      	movs	r0, #192	; 0xc0
 8001eb4:	f7ff f91e 	bl	80010f4 <escrever_texto_display>

	                  if(capsulas[Bn1].com_gas == yes){
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <main+0xc68>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	463a      	mov	r2, r7
 8001ec0:	232c      	movs	r3, #44	; 0x2c
 8001ec2:	fb03 f301 	mul.w	r3, r3, r1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3324      	adds	r3, #36	; 0x24
 8001eca:	f993 3000 	ldrsb.w	r3, [r3]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	f040 8088 	bne.w	8001fe4 <main+0xc5c>

	                	  HAL_GPIO_WritePin(GPIOB, Y4, GPIO_PIN_SET);//abre valvula de gas
 8001ed4:	4b56      	ldr	r3, [pc, #344]	; (8002030 <main+0xca8>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	484c      	ldr	r0, [pc, #304]	; (8002010 <main+0xc88>)
 8001ede:	f002 f9be 	bl	800425e <HAL_GPIO_WritePin>
	                	  for(i=0; i <= 3000; i++){
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <main+0xcac>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e010      	b.n	8001f0c <main+0xb84>
							  dutyCycle_TIM1_CH4 = i;
 8001eea:	4b52      	ldr	r3, [pc, #328]	; (8002034 <main+0xcac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b51      	ldr	r3, [pc, #324]	; (8002038 <main+0xcb0>)
 8001ef2:	601a      	str	r2, [r3, #0]
							  TIM1->CCR4 = dutyCycle_TIM1_CH4;
 8001ef4:	4a51      	ldr	r2, [pc, #324]	; (800203c <main+0xcb4>)
 8001ef6:	4b50      	ldr	r3, [pc, #320]	; (8002038 <main+0xcb0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6413      	str	r3, [r2, #64]	; 0x40
							  HAL_Delay(0.06);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f001 f8d1 	bl	80030a4 <HAL_Delay>
	                	  for(i=0; i <= 3000; i++){
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <main+0xcac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a4a      	ldr	r2, [pc, #296]	; (8002034 <main+0xcac>)
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b49      	ldr	r3, [pc, #292]	; (8002034 <main+0xcac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f14:	4293      	cmp	r3, r2
 8001f16:	dde8      	ble.n	8001eea <main+0xb62>
	                	  }

	                	  HAL_Delay(((capsulas[Bn1].tempo_gas)*1000)-200);
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <main+0xc68>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	463a      	mov	r2, r7
 8001f20:	232c      	movs	r3, #44	; 0x2c
 8001f22:	fb03 f301 	mul.w	r3, r3, r1
 8001f26:	4413      	add	r3, r2
 8001f28:	3328      	adds	r3, #40	; 0x28
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4944      	ldr	r1, [pc, #272]	; (8002040 <main+0xcb8>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fe14 	bl	8000b5c <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4943      	ldr	r1, [pc, #268]	; (8002044 <main+0xcbc>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fd05 	bl	8000948 <__aeabi_fsub>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe ffd1 	bl	8000ee8 <__aeabi_f2uiz>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 f8ab 	bl	80030a4 <HAL_Delay>
	                	  HAL_GPIO_WritePin(GPIOB, Y4, GPIO_PIN_RESET);//fecha valvula de gas
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <main+0xca8>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	2200      	movs	r2, #0
 8001f54:	4619      	mov	r1, r3
 8001f56:	482e      	ldr	r0, [pc, #184]	; (8002010 <main+0xc88>)
 8001f58:	f002 f981 	bl	800425e <HAL_GPIO_WritePin>
	                	  HAL_Delay(((capsulas[Bn1].tempo_agua-capsulas[Bn1].tempo_gas)*1000)-250);
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <main+0xc68>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	463a      	mov	r2, r7
 8001f64:	232c      	movs	r3, #44	; 0x2c
 8001f66:	fb03 f301 	mul.w	r3, r3, r1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	331c      	adds	r3, #28
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <main+0xc68>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	463a      	mov	r2, r7
 8001f78:	232c      	movs	r3, #44	; 0x2c
 8001f7a:	fb03 f301 	mul.w	r3, r3, r1
 8001f7e:	4413      	add	r3, r2
 8001f80:	3328      	adds	r3, #40	; 0x28
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fcdf 	bl	8000948 <__aeabi_fsub>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	492c      	ldr	r1, [pc, #176]	; (8002040 <main+0xcb8>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fde4 	bl	8000b5c <__aeabi_fmul>
 8001f94:	4603      	mov	r3, r0
 8001f96:	492c      	ldr	r1, [pc, #176]	; (8002048 <main+0xcc0>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fcd5 	bl	8000948 <__aeabi_fsub>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe ffa1 	bl	8000ee8 <__aeabi_f2uiz>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 f87b 	bl	80030a4 <HAL_Delay>
	                	  for(i=3000; i >= 0; i--){
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <main+0xcac>)
 8001fb0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	e010      	b.n	8001fda <main+0xc52>
							  dutyCycle_TIM1_CH4 = i;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <main+0xcac>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <main+0xcb0>)
 8001fc0:	601a      	str	r2, [r3, #0]
							  TIM1->CCR4 = dutyCycle_TIM1_CH4;
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <main+0xcb4>)
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <main+0xcb0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
							  HAL_Delay(0.08);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f001 f86a 	bl	80030a4 <HAL_Delay>
	                	  for(i=3000; i >= 0; i--){
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <main+0xcac>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <main+0xcac>)
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <main+0xcac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	daea      	bge.n	8001fb8 <main+0xc30>
 8001fe2:	e07f      	b.n	80020e4 <main+0xd5c>
						  }


	                  }else{
	                	  for(i=0; i <= 3000; i++){
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <main+0xcac>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e040      	b.n	800206e <main+0xce6>
 8001fec:	20000354 	.word	0x20000354
 8001ff0:	20000282 	.word	0x20000282
 8001ff4:	42c80000 	.word	0x42c80000
 8001ff8:	41f00000 	.word	0x41f00000
 8001ffc:	2000027c 	.word	0x2000027c
 8002000:	08005ff8 	.word	0x08005ff8
 8002004:	080060b8 	.word	0x080060b8
 8002008:	20000224 	.word	0x20000224
 800200c:	20000006 	.word	0x20000006
 8002010:	40010c00 	.word	0x40010c00
 8002014:	20000280 	.word	0x20000280
 8002018:	20000308 	.word	0x20000308
 800201c:	51eb851f 	.word	0x51eb851f
 8002020:	080060cc 	.word	0x080060cc
 8002024:	080060d4 	.word	0x080060d4
 8002028:	20000008 	.word	0x20000008
 800202c:	080060e8 	.word	0x080060e8
 8002030:	2000000a 	.word	0x2000000a
 8002034:	20000304 	.word	0x20000304
 8002038:	20000230 	.word	0x20000230
 800203c:	40012c00 	.word	0x40012c00
 8002040:	447a0000 	.word	0x447a0000
 8002044:	43480000 	.word	0x43480000
 8002048:	437a0000 	.word	0x437a0000
							  dutyCycle_TIM1_CH4 = i;
 800204c:	4ba5      	ldr	r3, [pc, #660]	; (80022e4 <main+0xf5c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4ba5      	ldr	r3, [pc, #660]	; (80022e8 <main+0xf60>)
 8002054:	601a      	str	r2, [r3, #0]
							  TIM1->CCR4 = dutyCycle_TIM1_CH4;
 8002056:	4aa5      	ldr	r2, [pc, #660]	; (80022ec <main+0xf64>)
 8002058:	4ba3      	ldr	r3, [pc, #652]	; (80022e8 <main+0xf60>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
							  HAL_Delay(0.06);
 800205e:	2000      	movs	r0, #0
 8002060:	f001 f820 	bl	80030a4 <HAL_Delay>
	                	  for(i=0; i <= 3000; i++){
 8002064:	4b9f      	ldr	r3, [pc, #636]	; (80022e4 <main+0xf5c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a9e      	ldr	r2, [pc, #632]	; (80022e4 <main+0xf5c>)
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b9d      	ldr	r3, [pc, #628]	; (80022e4 <main+0xf5c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002076:	4293      	cmp	r3, r2
 8002078:	dde8      	ble.n	800204c <main+0xcc4>
	                	  }
	                	  HAL_Delay(((capsulas[Bn1].tempo_agua)*1000)-550);
 800207a:	4b9d      	ldr	r3, [pc, #628]	; (80022f0 <main+0xf68>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	463a      	mov	r2, r7
 8002082:	232c      	movs	r3, #44	; 0x2c
 8002084:	fb03 f301 	mul.w	r3, r3, r1
 8002088:	4413      	add	r3, r2
 800208a:	331c      	adds	r3, #28
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4999      	ldr	r1, [pc, #612]	; (80022f4 <main+0xf6c>)
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fd63 	bl	8000b5c <__aeabi_fmul>
 8002096:	4603      	mov	r3, r0
 8002098:	4997      	ldr	r1, [pc, #604]	; (80022f8 <main+0xf70>)
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fc54 	bl	8000948 <__aeabi_fsub>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ff20 	bl	8000ee8 <__aeabi_f2uiz>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fffa 	bl	80030a4 <HAL_Delay>
	                	  for(i=3000; i >= 0; i--){
 80020b0:	4b8c      	ldr	r3, [pc, #560]	; (80022e4 <main+0xf5c>)
 80020b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e010      	b.n	80020dc <main+0xd54>
							  dutyCycle_TIM1_CH4 = i;
 80020ba:	4b8a      	ldr	r3, [pc, #552]	; (80022e4 <main+0xf5c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <main+0xf60>)
 80020c2:	601a      	str	r2, [r3, #0]
							  TIM1->CCR4 = dutyCycle_TIM1_CH4;
 80020c4:	4a89      	ldr	r2, [pc, #548]	; (80022ec <main+0xf64>)
 80020c6:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <main+0xf60>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6413      	str	r3, [r2, #64]	; 0x40
							  HAL_Delay(0.08);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 ffe9 	bl	80030a4 <HAL_Delay>
	                	  for(i=3000; i >= 0; i--){
 80020d2:	4b84      	ldr	r3, [pc, #528]	; (80022e4 <main+0xf5c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	4a82      	ldr	r2, [pc, #520]	; (80022e4 <main+0xf5c>)
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <main+0xf5c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	daea      	bge.n	80020ba <main+0xd32>
						  }
	                  }
	                  HAL_GPIO_WritePin(GPIOB, Y1, GPIO_PIN_RESET);//fecha valvula
 80020e4:	4b85      	ldr	r3, [pc, #532]	; (80022fc <main+0xf74>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4884      	ldr	r0, [pc, #528]	; (8002300 <main+0xf78>)
 80020ee:	f002 f8b6 	bl	800425e <HAL_GPIO_WritePin>
	                  HAL_GPIO_WritePin(GPIOB, Y2, GPIO_PIN_RESET);//fecha valvula
 80020f2:	4b84      	ldr	r3, [pc, #528]	; (8002304 <main+0xf7c>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	4881      	ldr	r0, [pc, #516]	; (8002300 <main+0xf78>)
 80020fc:	f002 f8af 	bl	800425e <HAL_GPIO_WritePin>
	                  HAL_GPIO_WritePin(GPIOB, Y3, GPIO_PIN_RESET);//fecha valvula
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <main+0xf80>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	2200      	movs	r2, #0
 8002106:	4619      	mov	r1, r3
 8002108:	487d      	ldr	r0, [pc, #500]	; (8002300 <main+0xf78>)
 800210a:	f002 f8a8 	bl	800425e <HAL_GPIO_WritePin>
	                  estado = 4;
 800210e:	4b7f      	ldr	r3, [pc, #508]	; (800230c <main+0xf84>)
 8002110:	2204      	movs	r2, #4
 8002112:	701a      	strb	r2, [r3, #0]

	                  break;
 8002114:	e0e3      	b.n	80022de <main+0xf56>

	              case 4://aviso para remoçâo de capsula usada
	            	  escrever_texto_display(0xC0, "Remover capsula ");
 8002116:	497e      	ldr	r1, [pc, #504]	; (8002310 <main+0xf88>)
 8002118:	20c0      	movs	r0, #192	; 0xc0
 800211a:	f7fe ffeb 	bl	80010f4 <escrever_texto_display>
	            	  if(Bn1 == 0){
 800211e:	4b74      	ldr	r3, [pc, #464]	; (80022f0 <main+0xf68>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80d7 	bne.w	80022d6 <main+0xf4e>
	            		  estado = 0;
 8002128:	4b78      	ldr	r3, [pc, #480]	; (800230c <main+0xf84>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
	            	  }
	            	  break;
 800212e:	e0d2      	b.n	80022d6 <main+0xf4e>

	              case 5://capsula so de agua

	            	  if(Bn1 == 0){
 8002130:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <main+0xf68>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d106      	bne.n	8002146 <main+0xdbe>
	            		  estado = 0;
 8002138:	4b74      	ldr	r3, [pc, #464]	; (800230c <main+0xf84>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
	            		  selecao = -1;
 800213e:	4b75      	ldr	r3, [pc, #468]	; (8002314 <main+0xf8c>)
 8002140:	22ff      	movs	r2, #255	; 0xff
 8002142:	701a      	strb	r2, [r3, #0]
	            		  break;
 8002144:	e0cb      	b.n	80022de <main+0xf56>
	            	  }
	            	  if(state_btn_mais) selecao++;
 8002146:	4b74      	ldr	r3, [pc, #464]	; (8002318 <main+0xf90>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <main+0xdd8>
 800214e:	4b71      	ldr	r3, [pc, #452]	; (8002314 <main+0xf8c>)
 8002150:	f993 3000 	ldrsb.w	r3, [r3]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3301      	adds	r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	b25a      	sxtb	r2, r3
 800215c:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <main+0xf8c>)
 800215e:	701a      	strb	r2, [r3, #0]
					  if(state_btn_menos) selecao--;
 8002160:	4b6e      	ldr	r3, [pc, #440]	; (800231c <main+0xf94>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <main+0xdf2>
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <main+0xf8c>)
 800216a:	f993 3000 	ldrsb.w	r3, [r3]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	b25a      	sxtb	r2, r3
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <main+0xf8c>)
 8002178:	701a      	strb	r2, [r3, #0]
					  if(state_btn_c) {
 800217a:	4b69      	ldr	r3, [pc, #420]	; (8002320 <main+0xf98>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <main+0xe08>
						  estado = 1;
 8002182:	4b62      	ldr	r3, [pc, #392]	; (800230c <main+0xf84>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
						  selecao = 4;
 8002188:	4b62      	ldr	r3, [pc, #392]	; (8002314 <main+0xf8c>)
 800218a:	2204      	movs	r2, #4
 800218c:	701a      	strb	r2, [r3, #0]
						  break;
 800218e:	e0a6      	b.n	80022de <main+0xf56>
					  }

					  if(selecao == -1) selecao = 3;
 8002190:	4b60      	ldr	r3, [pc, #384]	; (8002314 <main+0xf8c>)
 8002192:	f993 3000 	ldrsb.w	r3, [r3]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d102      	bne.n	80021a2 <main+0xe1a>
 800219c:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <main+0xf8c>)
 800219e:	2203      	movs	r2, #3
 80021a0:	701a      	strb	r2, [r3, #0]
					  if(selecao == 4) selecao = 0;
 80021a2:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <main+0xf8c>)
 80021a4:	f993 3000 	ldrsb.w	r3, [r3]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d102      	bne.n	80021b2 <main+0xe2a>
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <main+0xf8c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]

	        		  if(selecao == 0){
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <main+0xf8c>)
 80021b4:	f993 3000 	ldrsb.w	r3, [r3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d12a      	bne.n	8002212 <main+0xe8a>
						  escrever_texto_display(0xC0, "   Agua quente  ");
 80021bc:	4959      	ldr	r1, [pc, #356]	; (8002324 <main+0xf9c>)
 80021be:	20c0      	movs	r0, #192	; 0xc0
 80021c0:	f7fe ff98 	bl	80010f4 <escrever_texto_display>
						  strcpy(capsulas[Bn1].tipo_agua, "quente");
 80021c4:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <main+0xf68>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	463a      	mov	r2, r7
 80021cc:	232c      	movs	r3, #44	; 0x2c
 80021ce:	fb03 f301 	mul.w	r3, r3, r1
 80021d2:	3310      	adds	r3, #16
 80021d4:	4413      	add	r3, r2
 80021d6:	3301      	adds	r3, #1
 80021d8:	4a53      	ldr	r2, [pc, #332]	; (8002328 <main+0xfa0>)
 80021da:	6810      	ldr	r0, [r2, #0]
 80021dc:	6018      	str	r0, [r3, #0]
 80021de:	8891      	ldrh	r1, [r2, #4]
 80021e0:	7992      	ldrb	r2, [r2, #6]
 80021e2:	8099      	strh	r1, [r3, #4]
 80021e4:	719a      	strb	r2, [r3, #6]
						  capsulas[Bn1].temperatura_agua = 80;
 80021e6:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <main+0xf68>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	463a      	mov	r2, r7
 80021ee:	232c      	movs	r3, #44	; 0x2c
 80021f0:	fb03 f301 	mul.w	r3, r3, r1
 80021f4:	4413      	add	r3, r2
 80021f6:	3320      	adds	r3, #32
 80021f8:	4a4c      	ldr	r2, [pc, #304]	; (800232c <main+0xfa4>)
 80021fa:	601a      	str	r2, [r3, #0]
						  capsulas[Bn1].tempo_agua = 3;
 80021fc:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <main+0xf68>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	463a      	mov	r2, r7
 8002204:	232c      	movs	r3, #44	; 0x2c
 8002206:	fb03 f301 	mul.w	r3, r3, r1
 800220a:	4413      	add	r3, r2
 800220c:	331c      	adds	r3, #28
 800220e:	4a48      	ldr	r2, [pc, #288]	; (8002330 <main+0xfa8>)
 8002210:	601a      	str	r2, [r3, #0]
					  }
					  if(selecao == 1){
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <main+0xf8c>)
 8002214:	f993 3000 	ldrsb.w	r3, [r3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d12a      	bne.n	8002272 <main+0xeea>
						  escrever_texto_display(0xC0, "   Agua gelada  ");
 800221c:	4945      	ldr	r1, [pc, #276]	; (8002334 <main+0xfac>)
 800221e:	20c0      	movs	r0, #192	; 0xc0
 8002220:	f7fe ff68 	bl	80010f4 <escrever_texto_display>
						  strcpy(capsulas[Bn1].tipo_agua, "gelada");
 8002224:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <main+0xf68>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	463a      	mov	r2, r7
 800222c:	232c      	movs	r3, #44	; 0x2c
 800222e:	fb03 f301 	mul.w	r3, r3, r1
 8002232:	3310      	adds	r3, #16
 8002234:	4413      	add	r3, r2
 8002236:	3301      	adds	r3, #1
 8002238:	4a3f      	ldr	r2, [pc, #252]	; (8002338 <main+0xfb0>)
 800223a:	6810      	ldr	r0, [r2, #0]
 800223c:	6018      	str	r0, [r3, #0]
 800223e:	8891      	ldrh	r1, [r2, #4]
 8002240:	7992      	ldrb	r2, [r2, #6]
 8002242:	8099      	strh	r1, [r3, #4]
 8002244:	719a      	strb	r2, [r3, #6]
						  capsulas[Bn1].temperatura_agua = 10;
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <main+0xf68>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	463a      	mov	r2, r7
 800224e:	232c      	movs	r3, #44	; 0x2c
 8002250:	fb03 f301 	mul.w	r3, r3, r1
 8002254:	4413      	add	r3, r2
 8002256:	3320      	adds	r3, #32
 8002258:	4a38      	ldr	r2, [pc, #224]	; (800233c <main+0xfb4>)
 800225a:	601a      	str	r2, [r3, #0]
						  capsulas[Bn1].tempo_agua = 3;
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <main+0xf68>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	463a      	mov	r2, r7
 8002264:	232c      	movs	r3, #44	; 0x2c
 8002266:	fb03 f301 	mul.w	r3, r3, r1
 800226a:	4413      	add	r3, r2
 800226c:	331c      	adds	r3, #28
 800226e:	4a30      	ldr	r2, [pc, #192]	; (8002330 <main+0xfa8>)
 8002270:	601a      	str	r2, [r3, #0]
					  }
					  if(selecao == 3){
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <main+0xf8c>)
 8002274:	f993 3000 	ldrsb.w	r3, [r3]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d11e      	bne.n	80022ba <main+0xf32>
						  escrever_texto_display(0xC0, "   Agua natural  ");
 800227c:	4930      	ldr	r1, [pc, #192]	; (8002340 <main+0xfb8>)
 800227e:	20c0      	movs	r0, #192	; 0xc0
 8002280:	f7fe ff38 	bl	80010f4 <escrever_texto_display>
						strcpy(capsulas[Bn1].tipo_agua, "natural");
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <main+0xf68>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	463a      	mov	r2, r7
 800228c:	232c      	movs	r3, #44	; 0x2c
 800228e:	fb03 f301 	mul.w	r3, r3, r1
 8002292:	3310      	adds	r3, #16
 8002294:	4413      	add	r3, r2
 8002296:	3301      	adds	r3, #1
 8002298:	492a      	ldr	r1, [pc, #168]	; (8002344 <main+0xfbc>)
 800229a:	461a      	mov	r2, r3
 800229c:	460b      	mov	r3, r1
 800229e:	cb03      	ldmia	r3!, {r0, r1}
 80022a0:	6010      	str	r0, [r2, #0]
 80022a2:	6051      	str	r1, [r2, #4]
						  capsulas[Bn1].tempo_agua = 3;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <main+0xf68>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	463a      	mov	r2, r7
 80022ac:	232c      	movs	r3, #44	; 0x2c
 80022ae:	fb03 f301 	mul.w	r3, r3, r1
 80022b2:	4413      	add	r3, r2
 80022b4:	331c      	adds	r3, #28
 80022b6:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <main+0xfa8>)
 80022b8:	601a      	str	r2, [r3, #0]
					  }
					  if(state_btn_s) {
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <main+0xfc0>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <main+0xf54>
						  estado = 1;
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <main+0xf84>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
					  }

	            	  break;
 80022c8:	e008      	b.n	80022dc <main+0xf54>
	                  break;
 80022ca:	bf00      	nop
 80022cc:	f7ff b9d9 	b.w	8001682 <main+0x2fa>
	                  break;
 80022d0:	bf00      	nop
 80022d2:	f7ff b9d6 	b.w	8001682 <main+0x2fa>
	            	  break;
 80022d6:	bf00      	nop
 80022d8:	f7ff b9d3 	b.w	8001682 <main+0x2fa>
	            	  break;
 80022dc:	bf00      	nop
	  state_Bn1_bit1 = HAL_GPIO_ReadPin(GPIOA, Bn1_bit1);
 80022de:	f7ff b9d0 	b.w	8001682 <main+0x2fa>
 80022e2:	bf00      	nop
 80022e4:	20000304 	.word	0x20000304
 80022e8:	20000230 	.word	0x20000230
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	20000282 	.word	0x20000282
 80022f4:	447a0000 	.word	0x447a0000
 80022f8:	44098000 	.word	0x44098000
 80022fc:	20000004 	.word	0x20000004
 8002300:	40010c00 	.word	0x40010c00
 8002304:	20000006 	.word	0x20000006
 8002308:	20000008 	.word	0x20000008
 800230c:	20000280 	.word	0x20000280
 8002310:	080060fc 	.word	0x080060fc
 8002314:	20000026 	.word	0x20000026
 8002318:	20000439 	.word	0x20000439
 800231c:	20000226 	.word	0x20000226
 8002320:	2000022c 	.word	0x2000022c
 8002324:	08006110 	.word	0x08006110
 8002328:	08006028 	.word	0x08006028
 800232c:	42a00000 	.word	0x42a00000
 8002330:	40400000 	.word	0x40400000
 8002334:	08006124 	.word	0x08006124
 8002338:	08005ff8 	.word	0x08005ff8
 800233c:	41200000 	.word	0x41200000
 8002340:	08006138 	.word	0x08006138
 8002344:	080060cc 	.word	0x080060cc
 8002348:	20000283 	.word	0x20000283

0800234c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b094      	sub	sp, #80	; 0x50
 8002350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002356:	2228      	movs	r2, #40	; 0x28
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fd10 	bl	8005d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800237c:	2301      	movs	r3, #1
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002386:	2300      	movs	r3, #0
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800238a:	2301      	movs	r3, #1
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238e:	2302      	movs	r3, #2
 8002390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002398:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800239c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 ff8c 	bl	80042c0 <HAL_RCC_OscConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023ae:	f000 fc1b 	bl	8002be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b2:	230f      	movs	r3, #15
 80023b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2102      	movs	r1, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 f9f6 	bl	80047c0 <HAL_RCC_ClockConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80023da:	f000 fc05 	bl	8002be8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023de:	2302      	movs	r3, #2
 80023e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fb70 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80023f6:	f000 fbf7 	bl	8002be8 <Error_Handler>
  }
}
 80023fa:	bf00      	nop
 80023fc:	3750      	adds	r7, #80	; 0x50
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <MX_ADC1_Init+0x184>)
 8002416:	4a5d      	ldr	r2, [pc, #372]	; (800258c <MX_ADC1_Init+0x188>)
 8002418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800241a:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <MX_ADC1_Init+0x184>)
 800241c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002420:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002422:	4b59      	ldr	r3, [pc, #356]	; (8002588 <MX_ADC1_Init+0x184>)
 8002424:	2200      	movs	r2, #0
 8002426:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002428:	4b57      	ldr	r3, [pc, #348]	; (8002588 <MX_ADC1_Init+0x184>)
 800242a:	2200      	movs	r2, #0
 800242c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800242e:	4b56      	ldr	r3, [pc, #344]	; (8002588 <MX_ADC1_Init+0x184>)
 8002430:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002436:	4b54      	ldr	r3, [pc, #336]	; (8002588 <MX_ADC1_Init+0x184>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 12;
 800243c:	4b52      	ldr	r3, [pc, #328]	; (8002588 <MX_ADC1_Init+0x184>)
 800243e:	220c      	movs	r2, #12
 8002440:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002442:	4851      	ldr	r0, [pc, #324]	; (8002588 <MX_ADC1_Init+0x184>)
 8002444:	f000 fe50 	bl	80030e8 <HAL_ADC_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800244e:	f000 fbcb 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002452:	2308      	movs	r3, #8
 8002454:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002456:	2301      	movs	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4849      	ldr	r0, [pc, #292]	; (8002588 <MX_ADC1_Init+0x184>)
 8002464:	f001 f808 	bl	8003478 <HAL_ADC_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800246e:	f000 fbbb 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002472:	2302      	movs	r3, #2
 8002474:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4843      	ldr	r0, [pc, #268]	; (8002588 <MX_ADC1_Init+0x184>)
 800247c:	f000 fffc 	bl	8003478 <HAL_ADC_ConfigChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002486:	f000 fbaf 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800248a:	2303      	movs	r3, #3
 800248c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4619      	mov	r1, r3
 8002492:	483d      	ldr	r0, [pc, #244]	; (8002588 <MX_ADC1_Init+0x184>)
 8002494:	f000 fff0 	bl	8003478 <HAL_ADC_ConfigChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800249e:	f000 fba3 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80024a2:	2304      	movs	r3, #4
 80024a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4837      	ldr	r0, [pc, #220]	; (8002588 <MX_ADC1_Init+0x184>)
 80024ac:	f000 ffe4 	bl	8003478 <HAL_ADC_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80024b6:	f000 fb97 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80024ba:	2305      	movs	r3, #5
 80024bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4831      	ldr	r0, [pc, #196]	; (8002588 <MX_ADC1_Init+0x184>)
 80024c4:	f000 ffd8 	bl	8003478 <HAL_ADC_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80024ce:	f000 fb8b 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80024d2:	2306      	movs	r3, #6
 80024d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	482b      	ldr	r0, [pc, #172]	; (8002588 <MX_ADC1_Init+0x184>)
 80024dc:	f000 ffcc 	bl	8003478 <HAL_ADC_ConfigChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80024e6:	f000 fb7f 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80024ea:	2309      	movs	r3, #9
 80024ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80024ee:	2307      	movs	r3, #7
 80024f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4824      	ldr	r0, [pc, #144]	; (8002588 <MX_ADC1_Init+0x184>)
 80024f8:	f000 ffbe 	bl	8003478 <HAL_ADC_ConfigChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8002502:	f000 fb71 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002506:	2308      	movs	r3, #8
 8002508:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	4619      	mov	r1, r3
 800250e:	481e      	ldr	r0, [pc, #120]	; (8002588 <MX_ADC1_Init+0x184>)
 8002510:	f000 ffb2 	bl	8003478 <HAL_ADC_ConfigChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800251a:	f000 fb65 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800251e:	2309      	movs	r3, #9
 8002520:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4818      	ldr	r0, [pc, #96]	; (8002588 <MX_ADC1_Init+0x184>)
 8002528:	f000 ffa6 	bl	8003478 <HAL_ADC_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002532:	f000 fb59 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002536:	230a      	movs	r3, #10
 8002538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4812      	ldr	r0, [pc, #72]	; (8002588 <MX_ADC1_Init+0x184>)
 8002540:	f000 ff9a 	bl	8003478 <HAL_ADC_ConfigChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 800254a:	f000 fb4d 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800254e:	230b      	movs	r3, #11
 8002550:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4619      	mov	r1, r3
 8002556:	480c      	ldr	r0, [pc, #48]	; (8002588 <MX_ADC1_Init+0x184>)
 8002558:	f000 ff8e 	bl	8003478 <HAL_ADC_ConfigChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8002562:	f000 fb41 	bl	8002be8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8002566:	230c      	movs	r3, #12
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	; (8002588 <MX_ADC1_Init+0x184>)
 8002570:	f000 ff82 	bl	8003478 <HAL_ADC_ConfigChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800257a:	f000 fb35 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200002d4 	.word	0x200002d4
 800258c:	40012400 	.word	0x40012400

08002590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b096      	sub	sp, #88	; 0x58
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	611a      	str	r2, [r3, #16]
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2220      	movs	r2, #32
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fbd9 	bl	8005d80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025ce:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025d0:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <MX_TIM1_Init+0x138>)
 80025d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025d4:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000-1;
 80025e0:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025e2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80025e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ee:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025f4:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025fa:	4832      	ldr	r0, [pc, #200]	; (80026c4 <MX_TIM1_Init+0x134>)
 80025fc:	f002 fbda 	bl	8004db4 <HAL_TIM_Base_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002606:	f000 faef 	bl	8002be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002614:	4619      	mov	r1, r3
 8002616:	482b      	ldr	r0, [pc, #172]	; (80026c4 <MX_TIM1_Init+0x134>)
 8002618:	f002 ff2e 	bl	8005478 <HAL_TIM_ConfigClockSource>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002622:	f000 fae1 	bl	8002be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002626:	4827      	ldr	r0, [pc, #156]	; (80026c4 <MX_TIM1_Init+0x134>)
 8002628:	f002 fc66 	bl	8004ef8 <HAL_TIM_PWM_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002632:	f000 fad9 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800263e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002642:	4619      	mov	r1, r3
 8002644:	481f      	ldr	r0, [pc, #124]	; (80026c4 <MX_TIM1_Init+0x134>)
 8002646:	f003 fa97 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002650:	f000 faca 	bl	8002be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002654:	2360      	movs	r3, #96	; 0x60
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800266c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002670:	220c      	movs	r2, #12
 8002672:	4619      	mov	r1, r3
 8002674:	4813      	ldr	r0, [pc, #76]	; (80026c4 <MX_TIM1_Init+0x134>)
 8002676:	f002 fe41 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002680:	f000 fab2 	bl	8002be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4807      	ldr	r0, [pc, #28]	; (80026c4 <MX_TIM1_Init+0x134>)
 80026a8:	f003 fac4 	bl	8005c34 <HAL_TIMEx_ConfigBreakDeadTime>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80026b2:	f000 fa99 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026b6:	4803      	ldr	r0, [pc, #12]	; (80026c4 <MX_TIM1_Init+0x134>)
 80026b8:	f000 fb9e 	bl	8002df8 <HAL_TIM_MspPostInit>

}
 80026bc:	bf00      	nop
 80026be:	3758      	adds	r7, #88	; 0x58
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000358 	.word	0x20000358
 80026c8:	40012c00 	.word	0x40012c00

080026cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
 80026f8:	615a      	str	r2, [r3, #20]
 80026fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026fc:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <MX_TIM2_Init+0xfc>)
 80026fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <MX_TIM2_Init+0xfc>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000-1;
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002712:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <MX_TIM2_Init+0xfc>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002724:	4828      	ldr	r0, [pc, #160]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002726:	f002 fb45 	bl	8004db4 <HAL_TIM_Base_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002730:	f000 fa5a 	bl	8002be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800273a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800273e:	4619      	mov	r1, r3
 8002740:	4821      	ldr	r0, [pc, #132]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002742:	f002 fe99 	bl	8005478 <HAL_TIM_ConfigClockSource>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800274c:	f000 fa4c 	bl	8002be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002750:	481d      	ldr	r0, [pc, #116]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002752:	f002 fbd1 	bl	8004ef8 <HAL_TIM_PWM_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800275c:	f000 fa44 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002768:	f107 0320 	add.w	r3, r7, #32
 800276c:	4619      	mov	r1, r3
 800276e:	4816      	ldr	r0, [pc, #88]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002770:	f003 fa02 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800277a:	f000 fa35 	bl	8002be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277e:	2360      	movs	r3, #96	; 0x60
 8002780:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2200      	movs	r2, #0
 8002792:	4619      	mov	r1, r3
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <MX_TIM2_Init+0xfc>)
 8002796:	f002 fdb1 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80027a0:	f000 fa22 	bl	8002be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	2204      	movs	r2, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <MX_TIM2_Init+0xfc>)
 80027ac:	f002 fda6 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80027b6:	f000 fa17 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <MX_TIM2_Init+0xfc>)
 80027bc:	f000 fb1c 	bl	8002df8 <HAL_TIM_MspPostInit>

}
 80027c0:	bf00      	nop
 80027c2:	3738      	adds	r7, #56	; 0x38
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200003ec 	.word	0x200003ec

080027cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	463b      	mov	r3, r7
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_TIM3_Init+0x94>)
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <MX_TIM3_Init+0x98>)
 80027ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7201;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM3_Init+0x94>)
 80027f0:	f641 4221 	movw	r2, #7201	; 0x1c21
 80027f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM3_Init+0x94>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3334;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_TIM3_Init+0x94>)
 80027fe:	f640 5206 	movw	r2, #3334	; 0xd06
 8002802:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_TIM3_Init+0x94>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_TIM3_Init+0x94>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002810:	4813      	ldr	r0, [pc, #76]	; (8002860 <MX_TIM3_Init+0x94>)
 8002812:	f002 facf 	bl	8004db4 <HAL_TIM_Base_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800281c:	f000 f9e4 	bl	8002be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	4619      	mov	r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <MX_TIM3_Init+0x94>)
 800282e:	f002 fe23 	bl	8005478 <HAL_TIM_ConfigClockSource>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002838:	f000 f9d6 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002844:	463b      	mov	r3, r7
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_TIM3_Init+0x94>)
 800284a:	f003 f995 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002854:	f000 f9c8 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000288 	.word	0x20000288
 8002864:	40000400 	.word	0x40000400

08002868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287c:	463b      	mov	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <MX_TIM4_Init+0x94>)
 8002886:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <MX_TIM4_Init+0x98>)
 8002888:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7201;
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <MX_TIM4_Init+0x94>)
 800288c:	f641 4221 	movw	r2, #7201	; 0x1c21
 8002890:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <MX_TIM4_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10001;
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <MX_TIM4_Init+0x94>)
 800289a:	f242 7211 	movw	r2, #10001	; 0x2711
 800289e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <MX_TIM4_Init+0x94>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <MX_TIM4_Init+0x94>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028ac:	4813      	ldr	r0, [pc, #76]	; (80028fc <MX_TIM4_Init+0x94>)
 80028ae:	f002 fa81 	bl	8004db4 <HAL_TIM_Base_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80028b8:	f000 f996 	bl	8002be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	4619      	mov	r1, r3
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <MX_TIM4_Init+0x94>)
 80028ca:	f002 fdd5 	bl	8005478 <HAL_TIM_ConfigClockSource>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80028d4:	f000 f988 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d8:	2300      	movs	r3, #0
 80028da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028e0:	463b      	mov	r3, r7
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_TIM4_Init+0x94>)
 80028e6:	f003 f947 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80028f0:	f000 f97a 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000234 	.word	0x20000234
 8002900:	40000800 	.word	0x40000800

08002904 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
static void MX_DMA_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <MX_DMA_Init+0x7c>)
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <MX_DMA_Init+0x7c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6153      	str	r3, [r2, #20]
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <MX_DMA_Init+0x7c>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <MX_DMA_Init+0x80>)
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <MX_DMA_Init+0x84>)
 8002926:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <MX_DMA_Init+0x80>)
 800292a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800292e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <MX_DMA_Init+0x80>)
 8002932:	2240      	movs	r2, #64	; 0x40
 8002934:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <MX_DMA_Init+0x80>)
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_DMA_Init+0x80>)
 800293e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002942:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <MX_DMA_Init+0x80>)
 8002946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800294a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <MX_DMA_Init+0x80>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_DMA_Init+0x80>)
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8002958:	480a      	ldr	r0, [pc, #40]	; (8002984 <MX_DMA_Init+0x80>)
 800295a:	f001 f921 	bl	8003ba0 <HAL_DMA_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_DMA_Init+0x64>
  {
    Error_Handler( );
 8002964:	f000 f940 	bl	8002be8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	200b      	movs	r0, #11
 800296e:	f001 f8e0 	bl	8003b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002972:	200b      	movs	r0, #11
 8002974:	f001 f8f9 	bl	8003b6a <HAL_NVIC_EnableIRQ>

}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	200003a0 	.word	0x200003a0
 8002988:	4002001c 	.word	0x4002001c

0800298c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a0:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a44      	ldr	r2, [pc, #272]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a3e      	ldr	r2, [pc, #248]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029be:	f043 0320 	orr.w	r3, r3, #32
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e8:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <MX_GPIO_Init+0x12c>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a06:	482d      	ldr	r0, [pc, #180]	; (8002abc <MX_GPIO_Init+0x130>)
 8002a08:	f001 fc29 	bl	800425e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	21cf      	movs	r1, #207	; 0xcf
 8002a10:	482b      	ldr	r0, [pc, #172]	; (8002ac0 <MX_GPIO_Init+0x134>)
 8002a12:	f001 fc24 	bl	800425e <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002a1c:	4829      	ldr	r0, [pc, #164]	; (8002ac4 <MX_GPIO_Init+0x138>)
 8002a1e:	f001 fc1e 	bl	800425e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4820      	ldr	r0, [pc, #128]	; (8002abc <MX_GPIO_Init+0x130>)
 8002a3c:	f001 fa9e 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a40:	23cf      	movs	r3, #207	; 0xcf
 8002a42:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	4619      	mov	r1, r3
 8002a56:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <MX_GPIO_Init+0x134>)
 8002a58:	f001 fa90 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a5c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	4619      	mov	r1, r3
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <MX_GPIO_Init+0x138>)
 8002a76:	f001 fa81 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a7a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <MX_GPIO_Init+0x134>)
 8002a90:	f001 fa74 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002a94:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002a98:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	f107 0310 	add.w	r3, r7, #16
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <MX_GPIO_Init+0x138>)
 8002aaa:	f001 fa67 	bl	8003f7c <HAL_GPIO_Init>

}
 8002aae:	bf00      	nop
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40011000 	.word	0x40011000
 8002ac0:	40010800 	.word	0x40010800
 8002ac4:	40010c00 	.word	0x40010c00

08002ac8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//função para as inperrupções dos timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  //verifica qual time gerou a interrupção
  if (htim == &htim3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d12c      	bne.n	8002b32 <HAL_TIM_PeriodElapsedCallback+0x6a>
  {

	  /////leitura botoes//////
	  state_btn_c = HAL_GPIO_ReadPin(GPIOB, btn_c);
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	482e      	ldr	r0, [pc, #184]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ae0:	f001 fba6 	bl	8004230 <HAL_GPIO_ReadPin>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002aea:	701a      	strb	r2, [r3, #0]
	  state_btn_mais = HAL_GPIO_ReadPin(GPIOB, btn_mais);
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	4829      	ldr	r0, [pc, #164]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002af4:	f001 fb9c 	bl	8004230 <HAL_GPIO_ReadPin>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002afe:	701a      	strb	r2, [r3, #0]
	  state_btn_menos = HAL_GPIO_ReadPin(GPIOB, btn_menos);
 8002b00:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	4824      	ldr	r0, [pc, #144]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002b08:	f001 fb92 	bl	8004230 <HAL_GPIO_ReadPin>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002b12:	701a      	strb	r2, [r3, #0]
	  state_btn_s = HAL_GPIO_ReadPin(GPIOB, btn_s);
 8002b14:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	481f      	ldr	r0, [pc, #124]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002b1c:	f001 fb88 	bl	8004230 <HAL_GPIO_ReadPin>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002b26:	701a      	strb	r2, [r3, #0]


	  //////led para mostar que o sistemas esta funcionando////
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2c:	4822      	ldr	r0, [pc, #136]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002b2e:	f001 fbae 	bl	800428e <HAL_GPIO_TogglePin>
  }
  if (htim == &htim4){
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d126      	bne.n	8002b88 <HAL_TIM_PeriodElapsedCallback+0xc0>
	  segundos++;
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b44:	801a      	strh	r2, [r3, #0]
	  if(segundos == 60){
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	2b3c      	cmp	r3, #60	; 0x3c
 8002b4c:	d108      	bne.n	8002b60 <HAL_TIM_PeriodElapsedCallback+0x98>
		  segundos = 0;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	801a      	strh	r2, [r3, #0]
		  minutos ++;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b5e:	801a      	strh	r2, [r3, #0]
	  }
	  if(minutos == 60){
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	2b3c      	cmp	r3, #60	; 0x3c
 8002b66:	d108      	bne.n	8002b7a <HAL_TIM_PeriodElapsedCallback+0xb2>
		  horas++;
 8002b68:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002b72:	801a      	strh	r2, [r3, #0]
		  minutos = 0;
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	801a      	strh	r2, [r3, #0]
	  }
	  if(horas == 24){
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	2b18      	cmp	r3, #24
 8002b80:	d102      	bne.n	8002b88 <HAL_TIM_PeriodElapsedCallback+0xc0>
		  horas = 0;
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	801a      	strh	r2, [r3, #0]
	  }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000288 	.word	0x20000288
 8002b94:	20000012 	.word	0x20000012
 8002b98:	40010c00 	.word	0x40010c00
 8002b9c:	2000022c 	.word	0x2000022c
 8002ba0:	20000014 	.word	0x20000014
 8002ba4:	20000439 	.word	0x20000439
 8002ba8:	20000016 	.word	0x20000016
 8002bac:	20000226 	.word	0x20000226
 8002bb0:	20000018 	.word	0x20000018
 8002bb4:	20000283 	.word	0x20000283
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	20000234 	.word	0x20000234
 8002bc0:	200002d0 	.word	0x200002d0
 8002bc4:	2000043a 	.word	0x2000043a
 8002bc8:	20000220 	.word	0x20000220

08002bcc <HAL_ADC_ConvHalfCpltCallback>:

//função do DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	adcDataReady = 1;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20000438 	.word	0x20000438

08002be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_MspInit+0x5c>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_MspInit+0x5c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6193      	str	r3, [r2, #24]
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_MspInit+0x5c>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_MspInit+0x5c>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_MspInit+0x5c>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	61d3      	str	r3, [r2, #28]
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_MspInit+0x5c>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_MspInit+0x60>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_MspInit+0x60>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000

08002c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <HAL_ADC_MspInit+0xbc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d149      	bne.n	8002d0c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_ADC_MspInit+0xc0>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <HAL_ADC_MspInit+0xc0>)
 8002c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_ADC_MspInit+0xc0>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_ADC_MspInit+0xc0>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <HAL_ADC_MspInit+0xc0>)
 8002c96:	f043 0308 	orr.w	r3, r3, #8
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_ADC_MspInit+0xc0>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cac:	2303      	movs	r3, #3
 8002cae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4819      	ldr	r0, [pc, #100]	; (8002d1c <HAL_ADC_MspInit+0xc4>)
 8002cb8:	f001 f960 	bl	8003f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cbe:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_ADC_MspInit+0xcc>)
 8002cc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cf0:	480b      	ldr	r0, [pc, #44]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002cf2:	f000 ff55 	bl	8003ba0 <HAL_DMA_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002cfc:	f7ff ff74 	bl	8002be8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002d04:	621a      	str	r2, [r3, #32]
 8002d06:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <HAL_ADC_MspInit+0xc8>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40012400 	.word	0x40012400
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010c00 	.word	0x40010c00
 8002d20:	20000310 	.word	0x20000310
 8002d24:	40020008 	.word	0x40020008

08002d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_TIM_Base_MspInit+0xc0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10c      	bne.n	8002d54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d44:	6193      	str	r3, [r2, #24]
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d52:	e044      	b.n	8002dde <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	61d3      	str	r3, [r2, #28]
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
}
 8002d76:	e032      	b.n	8002dde <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <HAL_TIM_Base_MspInit+0xc8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d114      	bne.n	8002dac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d82:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	61d3      	str	r3, [r2, #28]
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	201d      	movs	r0, #29
 8002da0:	f000 fec7 	bl	8003b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002da4:	201d      	movs	r0, #29
 8002da6:	f000 fee0 	bl	8003b6a <HAL_NVIC_EnableIRQ>
}
 8002daa:	e018      	b.n	8002dde <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_TIM_Base_MspInit+0xcc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d113      	bne.n	8002dde <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	61d3      	str	r3, [r2, #28]
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_TIM_Base_MspInit+0xc4>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	201e      	movs	r0, #30
 8002dd4:	f000 fead 	bl	8003b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dd8:	201e      	movs	r0, #30
 8002dda:	f000 fec6 	bl	8003b6a <HAL_NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800

08002df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a34      	ldr	r2, [pc, #208]	; (8002ee4 <HAL_TIM_MspPostInit+0xec>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d119      	bne.n	8002e4c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a32      	ldr	r2, [pc, #200]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	4619      	mov	r1, r3
 8002e44:	4829      	ldr	r0, [pc, #164]	; (8002eec <HAL_TIM_MspPostInit+0xf4>)
 8002e46:	f001 f899 	bl	8003f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e4a:	e047      	b.n	8002edc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d142      	bne.n	8002edc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	4a23      	ldr	r2, [pc, #140]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6193      	str	r3, [r2, #24]
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	6193      	str	r3, [r2, #24]
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2302      	movs	r3, #2
 8002e92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4814      	ldr	r0, [pc, #80]	; (8002eec <HAL_TIM_MspPostInit+0xf4>)
 8002e9c:	f001 f86e 	bl	8003f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480f      	ldr	r0, [pc, #60]	; (8002ef0 <HAL_TIM_MspPostInit+0xf8>)
 8002eb4:	f001 f862 	bl	8003f7c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_TIM_MspPostInit+0xfc>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_TIM_MspPostInit+0xfc>)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	6053      	str	r3, [r2, #4]
}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40010c00 	.word	0x40010c00
 8002ef4:	40010000 	.word	0x40010000

08002ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f08:	e7fe      	b.n	8002f08 <HardFault_Handler+0x4>

08002f0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f0e:	e7fe      	b.n	8002f0e <MemManage_Handler+0x4>

08002f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f14:	e7fe      	b.n	8002f14 <BusFault_Handler+0x4>

08002f16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f1a:	e7fe      	b.n	8002f1a <UsageFault_Handler+0x4>

08002f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f44:	f000 f892 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <DMA1_Channel1_IRQHandler+0x10>)
 8002f52:	f000 fedf 	bl	8003d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000310 	.word	0x20000310

08002f60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <TIM3_IRQHandler+0x10>)
 8002f66:	f002 f8c1 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000288 	.word	0x20000288

08002f74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <TIM4_IRQHandler+0x10>)
 8002f7a:	f002 f8b7 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000234 	.word	0x20000234

08002f88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f96:	e003      	b.n	8002fa0 <LoopCopyDataInit>

08002f98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f9e:	3104      	adds	r1, #4

08002fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fa0:	480a      	ldr	r0, [pc, #40]	; (8002fcc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fa4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fa6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fa8:	d3f6      	bcc.n	8002f98 <CopyDataInit>
  ldr r2, =_sbss
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fac:	e002      	b.n	8002fb4 <LoopFillZerobss>

08002fae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002fb0:	f842 3b04 	str.w	r3, [r2], #4

08002fb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002fb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fb8:	d3f9      	bcc.n	8002fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fba:	f7ff ffe5 	bl	8002f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fbe:	f002 fea1 	bl	8005d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fc2:	f7fe f9e1 	bl	8001388 <main>
  bx lr
 8002fc6:	4770      	bx	lr
  ldr r3, =_sidata
 8002fc8:	080062c4 	.word	0x080062c4
  ldr r0, =_sdata
 8002fcc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fd0:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8002fd4:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 8002fd8:	20000478 	.word	0x20000478

08002fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC1_2_IRQHandler>
	...

08002fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_Init+0x28>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_Init+0x28>)
 8002fea:	f043 0310 	orr.w	r3, r3, #16
 8002fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f000 fd93 	bl	8003b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f000 f808 	bl	800300c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffc:	f7ff fdfa 	bl	8002bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40022000 	.word	0x40022000

0800300c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_InitTick+0x54>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_InitTick+0x58>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003022:	fbb3 f3f1 	udiv	r3, r3, r1
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fdab 	bl	8003b86 <HAL_SYSTICK_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00e      	b.n	8003058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d80a      	bhi.n	8003056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003040:	2200      	movs	r2, #0
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f000 fd73 	bl	8003b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <HAL_InitTick+0x5c>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000028 	.word	0x20000028
 8003064:	20000030 	.word	0x20000030
 8003068:	2000002c 	.word	0x2000002c

0800306c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_IncTick+0x1c>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_IncTick+0x20>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <HAL_IncTick+0x20>)
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	20000030 	.word	0x20000030
 800308c:	20000474 	.word	0x20000474

08003090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return uwTick;
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <HAL_GetTick+0x10>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	20000474 	.word	0x20000474

080030a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff fff0 	bl	8003090 <HAL_GetTick>
 80030b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d005      	beq.n	80030ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_Delay+0x40>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ca:	bf00      	nop
 80030cc:	f7ff ffe0 	bl	8003090 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d8f7      	bhi.n	80030cc <HAL_Delay+0x28>
  {
  }
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000030 	.word	0x20000030

080030e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0be      	b.n	8003288 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fd96 	bl	8002c58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 faed 	bl	800370c <ADC_ConversionStop_Disable>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8099 	bne.w	8003276 <HAL_ADC_Init+0x18e>
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 8095 	bne.w	8003276 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003154:	f023 0302 	bic.w	r3, r3, #2
 8003158:	f043 0202 	orr.w	r2, r3, #2
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003168:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7b1b      	ldrb	r3, [r3, #12]
 800316e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003170:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4313      	orrs	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003180:	d003      	beq.n	800318a <HAL_ADC_Init+0xa2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <HAL_ADC_Init+0xa8>
 800318a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800318e:	e000      	b.n	8003192 <HAL_ADC_Init+0xaa>
 8003190:	2300      	movs	r3, #0
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7d1b      	ldrb	r3, [r3, #20]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d119      	bne.n	80031d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7b1b      	ldrb	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	035a      	lsls	r2, r3, #13
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e00b      	b.n	80031d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <HAL_ADC_Init+0x1a8>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003204:	d003      	beq.n	800320e <HAL_ADC_Init+0x126>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d104      	bne.n	8003218 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	3b01      	subs	r3, #1
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	430a      	orrs	r2, r1
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_ADC_Init+0x1ac>)
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	d10b      	bne.n	8003254 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003252:	e018      	b.n	8003286 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f023 0312 	bic.w	r3, r3, #18
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003274:	e007      	b.n	8003286 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	ffe1f7fd 	.word	0xffe1f7fd
 8003294:	ff1f0efe 	.word	0xff1f0efe

08003298 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a64      	ldr	r2, [pc, #400]	; (8003440 <HAL_ADC_Start_DMA+0x1a8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_ADC_Start_DMA+0x24>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a63      	ldr	r2, [pc, #396]	; (8003444 <HAL_ADC_Start_DMA+0x1ac>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d106      	bne.n	80032ca <HAL_ADC_Start_DMA+0x32>
 80032bc:	4b60      	ldr	r3, [pc, #384]	; (8003440 <HAL_ADC_Start_DMA+0x1a8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 80b3 	bne.w	8003430 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_Start_DMA+0x40>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e0ae      	b.n	8003436 <HAL_ADC_Start_DMA+0x19e>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f9c1 	bl	8003668 <ADC_Enable>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 809a 	bne.w	8003426 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <HAL_ADC_Start_DMA+0x1ac>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d105      	bne.n	800331c <HAL_ADC_Start_DMA+0x84>
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <HAL_ADC_Start_DMA+0x1a8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d115      	bne.n	8003348 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003332:	2b00      	cmp	r3, #0
 8003334:	d026      	beq.n	8003384 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800333e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003346:	e01d      	b.n	8003384 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a39      	ldr	r2, [pc, #228]	; (8003440 <HAL_ADC_Start_DMA+0x1a8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_ADC_Start_DMA+0xd0>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a38      	ldr	r2, [pc, #224]	; (8003444 <HAL_ADC_Start_DMA+0x1ac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d10d      	bne.n	8003384 <HAL_ADC_Start_DMA+0xec>
 8003368:	4b35      	ldr	r3, [pc, #212]	; (8003440 <HAL_ADC_Start_DMA+0x1a8>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800337c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	f023 0206 	bic.w	r2, r3, #6
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
 800339c:	e002      	b.n	80033a4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <HAL_ADC_Start_DMA+0x1b0>)
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a24      	ldr	r2, [pc, #144]	; (800344c <HAL_ADC_Start_DMA+0x1b4>)
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a23      	ldr	r2, [pc, #140]	; (8003450 <HAL_ADC_Start_DMA+0x1b8>)
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0202 	mvn.w	r2, #2
 80033cc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033dc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a18      	ldr	r0, [r3, #32]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	334c      	adds	r3, #76	; 0x4c
 80033e8:	4619      	mov	r1, r3
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f000 fc31 	bl	8003c54 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003400:	d108      	bne.n	8003414 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003410:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003412:	e00f      	b.n	8003434 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003422:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003424:	e006      	b.n	8003434 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800342e:	e001      	b.n	8003434 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003434:	7dfb      	ldrb	r3, [r7, #23]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40012400 	.word	0x40012400
 8003444:	40012800 	.word	0x40012800
 8003448:	08003781 	.word	0x08003781
 800344c:	080037fd 	.word	0x080037fd
 8003450:	08003819 	.word	0x08003819

08003454 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x20>
 8003494:	2302      	movs	r3, #2
 8003496:	e0dc      	b.n	8003652 <HAL_ADC_ConfigChannel+0x1da>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d81c      	bhi.n	80034e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b05      	subs	r3, #5
 80034ba:	221f      	movs	r2, #31
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	4019      	ands	r1, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b05      	subs	r3, #5
 80034d4:	fa00 f203 	lsl.w	r2, r0, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	635a      	str	r2, [r3, #52]	; 0x34
 80034e0:	e03c      	b.n	800355c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d81c      	bhi.n	8003524 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	3b23      	subs	r3, #35	; 0x23
 80034fc:	221f      	movs	r2, #31
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	4019      	ands	r1, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	3b23      	subs	r3, #35	; 0x23
 8003516:	fa00 f203 	lsl.w	r2, r0, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
 8003522:	e01b      	b.n	800355c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b41      	subs	r3, #65	; 0x41
 8003536:	221f      	movs	r2, #31
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	4019      	ands	r1, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b41      	subs	r3, #65	; 0x41
 8003550:	fa00 f203 	lsl.w	r2, r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d91c      	bls.n	800359e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	3b1e      	subs	r3, #30
 8003576:	2207      	movs	r2, #7
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	4019      	ands	r1, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6898      	ldr	r0, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	3b1e      	subs	r3, #30
 8003590:	fa00 f203 	lsl.w	r2, r0, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e019      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6919      	ldr	r1, [r3, #16]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	2207      	movs	r2, #7
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	4019      	ands	r1, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6898      	ldr	r0, [r3, #8]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d003      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035de:	2b11      	cmp	r3, #17
 80035e0:	d132      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_ADC_ConfigChannel+0x1e4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d125      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d126      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003608:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b10      	cmp	r3, #16
 8003610:	d11a      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_ADC_ConfigChannel+0x1e8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_ADC_ConfigChannel+0x1ec>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	0c9a      	lsrs	r2, r3, #18
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003628:	e002      	b.n	8003630 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3b01      	subs	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f9      	bne.n	800362a <HAL_ADC_ConfigChannel+0x1b2>
 8003636:	e007      	b.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012400 	.word	0x40012400
 8003660:	20000028 	.word	0x20000028
 8003664:	431bde83 	.word	0x431bde83

08003668 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d039      	beq.n	80036fa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <ADC_Enable+0x9c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <ADC_Enable+0xa0>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	0c9b      	lsrs	r3, r3, #18
 80036a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036a4:	e002      	b.n	80036ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f9      	bne.n	80036a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036b2:	f7ff fced 	bl	8003090 <HAL_GetTick>
 80036b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036b8:	e018      	b.n	80036ec <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ba:	f7ff fce9 	bl	8003090 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d911      	bls.n	80036ec <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e007      	b.n	80036fc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d1df      	bne.n	80036ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000028 	.word	0x20000028
 8003708:	431bde83 	.word	0x431bde83

0800370c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d127      	bne.n	8003776 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003736:	f7ff fcab 	bl	8003090 <HAL_GetTick>
 800373a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800373c:	e014      	b.n	8003768 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800373e:	f7ff fca7 	bl	8003090 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d90d      	bls.n	8003768 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	f043 0210 	orr.w	r2, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f043 0201 	orr.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e007      	b.n	8003778 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d0e3      	beq.n	800373e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003796:	2b00      	cmp	r3, #0
 8003798:	d127      	bne.n	80037ea <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037b4:	d115      	bne.n	80037e2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d111      	bne.n	80037e2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fe36 	bl	8003454 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80037e8:	e004      	b.n	80037f4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff f9de 	bl	8002bcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff fe11 	bl	8003466 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_ADCEx_Calibration_Start+0x1e>
 8003866:	2302      	movs	r3, #2
 8003868:	e086      	b.n	8003978 <HAL_ADCEx_Calibration_Start+0x12c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff4a 	bl	800370c <ADC_ConversionStop_Disable>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d175      	bne.n	800396e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800388a:	f023 0302 	bic.w	r3, r3, #2
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003896:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <HAL_ADCEx_Calibration_Start+0x134>)
 8003898:	681c      	ldr	r4, [r3, #0]
 800389a:	2002      	movs	r0, #2
 800389c:	f001 f9ce 	bl	8004c3c <HAL_RCCEx_GetPeriphCLKFreq>
 80038a0:	4603      	mov	r3, r0
 80038a2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80038a6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80038a8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80038aa:	e002      	b.n	80038b2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f9      	bne.n	80038ac <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fed5 	bl	8003668 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0208 	orr.w	r2, r2, #8
 80038cc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80038ce:	f7ff fbdf 	bl	8003090 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80038d4:	e014      	b.n	8003900 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80038d6:	f7ff fbdb 	bl	8003090 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b0a      	cmp	r3, #10
 80038e2:	d90d      	bls.n	8003900 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f023 0312 	bic.w	r3, r3, #18
 80038ec:	f043 0210 	orr.w	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e03b      	b.n	8003978 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0204 	orr.w	r2, r2, #4
 800391c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800391e:	f7ff fbb7 	bl	8003090 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003924:	e014      	b.n	8003950 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003926:	f7ff fbb3 	bl	8003090 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b0a      	cmp	r3, #10
 8003932:	d90d      	bls.n	8003950 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f023 0312 	bic.w	r3, r3, #18
 800393c:	f043 0210 	orr.w	r2, r3, #16
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e013      	b.n	8003978 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e3      	bne.n	8003926 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003976:	7dfb      	ldrb	r3, [r7, #23]
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	20000028 	.word	0x20000028

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <__NVIC_EnableIRQ+0x34>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	; (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f1c3 0307 	rsb	r3, r3, #7
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf28      	it	cs
 8003a92:	2304      	movcs	r3, #4
 8003a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d902      	bls.n	8003aa4 <NVIC_EncodePriority+0x30>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3b03      	subs	r3, #3
 8003aa2:	e000      	b.n	8003aa6 <NVIC_EncodePriority+0x32>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	4313      	orrs	r3, r2
         );
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae8:	d301      	bcc.n	8003aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aea:	2301      	movs	r3, #1
 8003aec:	e00f      	b.n	8003b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <SysTick_Config+0x40>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af6:	210f      	movs	r1, #15
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	f7ff ff90 	bl	8003a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <SysTick_Config+0x40>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b06:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <SysTick_Config+0x40>)
 8003b08:	2207      	movs	r2, #7
 8003b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	e000e010 	.word	0xe000e010

08003b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff2d 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	4603      	mov	r3, r0
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b44:	f7ff ff42 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	6978      	ldr	r0, [r7, #20]
 8003b50:	f7ff ff90 	bl	8003a74 <NVIC_EncodePriority>
 8003b54:	4602      	mov	r2, r0
 8003b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff5f 	bl	8003a20 <__NVIC_SetPriority>
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	4603      	mov	r3, r0
 8003b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ff35 	bl	80039e8 <__NVIC_EnableIRQ>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ffa2 	bl	8003ad8 <SysTick_Config>
 8003b94:	4603      	mov	r3, r0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e043      	b.n	8003c3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <HAL_DMA_Init+0xa8>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <HAL_DMA_Init+0xac>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	009a      	lsls	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <HAL_DMA_Init+0xb0>)
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	bffdfff8 	.word	0xbffdfff8
 8003c4c:	cccccccd 	.word	0xcccccccd
 8003c50:	40020000 	.word	0x40020000

08003c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_DMA_Start_IT+0x20>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e04a      	b.n	8003d0a <HAL_DMA_Start_IT+0xb6>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d13a      	bne.n	8003cfc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f938 	bl	8003f20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 020e 	orr.w	r2, r2, #14
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e00f      	b.n	8003cea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0204 	bic.w	r2, r2, #4
 8003cd8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 020a 	orr.w	r2, r2, #10
 8003ce8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e005      	b.n	8003d08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
 8003d06:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2204      	movs	r2, #4
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d04f      	beq.n	8003ddc <HAL_DMA_IRQHandler+0xc8>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a66      	ldr	r2, [pc, #408]	; (8003f04 <HAL_DMA_IRQHandler+0x1f0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d029      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xae>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a65      	ldr	r2, [pc, #404]	; (8003f08 <HAL_DMA_IRQHandler+0x1f4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <HAL_DMA_IRQHandler+0xaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a63      	ldr	r2, [pc, #396]	; (8003f0c <HAL_DMA_IRQHandler+0x1f8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01a      	beq.n	8003db8 <HAL_DMA_IRQHandler+0xa4>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a62      	ldr	r2, [pc, #392]	; (8003f10 <HAL_DMA_IRQHandler+0x1fc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d012      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x9e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a60      	ldr	r2, [pc, #384]	; (8003f14 <HAL_DMA_IRQHandler+0x200>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00a      	beq.n	8003dac <HAL_DMA_IRQHandler+0x98>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5f      	ldr	r2, [pc, #380]	; (8003f18 <HAL_DMA_IRQHandler+0x204>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d102      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x92>
 8003da0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003da4:	e00e      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xb0>
 8003da6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003daa:	e00b      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xb0>
 8003dac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003db0:	e008      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xb0>
 8003db2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003db6:	e005      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xb0>
 8003db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbc:	e002      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xb0>
 8003dbe:	2340      	movs	r3, #64	; 0x40
 8003dc0:	e000      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xb0>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	4a55      	ldr	r2, [pc, #340]	; (8003f1c <HAL_DMA_IRQHandler+0x208>)
 8003dc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8094 	beq.w	8003efa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003dda:	e08e      	b.n	8003efa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2202      	movs	r2, #2
 8003de2:	409a      	lsls	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d056      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x186>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d051      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 020a 	bic.w	r2, r2, #10
 8003e12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a38      	ldr	r2, [pc, #224]	; (8003f04 <HAL_DMA_IRQHandler+0x1f0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d029      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x166>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a37      	ldr	r2, [pc, #220]	; (8003f08 <HAL_DMA_IRQHandler+0x1f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x162>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <HAL_DMA_IRQHandler+0x1f8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01a      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x15c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <HAL_DMA_IRQHandler+0x1fc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d012      	beq.n	8003e6a <HAL_DMA_IRQHandler+0x156>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a32      	ldr	r2, [pc, #200]	; (8003f14 <HAL_DMA_IRQHandler+0x200>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00a      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x150>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a31      	ldr	r2, [pc, #196]	; (8003f18 <HAL_DMA_IRQHandler+0x204>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d102      	bne.n	8003e5e <HAL_DMA_IRQHandler+0x14a>
 8003e58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e5c:	e00e      	b.n	8003e7c <HAL_DMA_IRQHandler+0x168>
 8003e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e62:	e00b      	b.n	8003e7c <HAL_DMA_IRQHandler+0x168>
 8003e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e68:	e008      	b.n	8003e7c <HAL_DMA_IRQHandler+0x168>
 8003e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e6e:	e005      	b.n	8003e7c <HAL_DMA_IRQHandler+0x168>
 8003e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e74:	e002      	b.n	8003e7c <HAL_DMA_IRQHandler+0x168>
 8003e76:	2320      	movs	r3, #32
 8003e78:	e000      	b.n	8003e7c <HAL_DMA_IRQHandler+0x168>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <HAL_DMA_IRQHandler+0x208>)
 8003e7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d034      	beq.n	8003efa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e98:	e02f      	b.n	8003efa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d028      	beq.n	8003efc <HAL_DMA_IRQHandler+0x1e8>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d023      	beq.n	8003efc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 020e 	bic.w	r2, r2, #14
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
    }
  }
  return;
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
}
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40020008 	.word	0x40020008
 8003f08:	4002001c 	.word	0x4002001c
 8003f0c:	40020030 	.word	0x40020030
 8003f10:	40020044 	.word	0x40020044
 8003f14:	40020058 	.word	0x40020058
 8003f18:	4002006c 	.word	0x4002006c
 8003f1c:	40020000 	.word	0x40020000

08003f20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d108      	bne.n	8003f60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f5e:	e007      	b.n	8003f70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	60da      	str	r2, [r3, #12]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b08b      	sub	sp, #44	; 0x2c
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8e:	e127      	b.n	80041e0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f90:	2201      	movs	r2, #1
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f040 8116 	bne.w	80041da <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b12      	cmp	r3, #18
 8003fb4:	d034      	beq.n	8004020 <HAL_GPIO_Init+0xa4>
 8003fb6:	2b12      	cmp	r3, #18
 8003fb8:	d80d      	bhi.n	8003fd6 <HAL_GPIO_Init+0x5a>
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d02b      	beq.n	8004016 <HAL_GPIO_Init+0x9a>
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d804      	bhi.n	8003fcc <HAL_GPIO_Init+0x50>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d031      	beq.n	800402a <HAL_GPIO_Init+0xae>
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d01c      	beq.n	8004004 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fca:	e048      	b.n	800405e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d043      	beq.n	8004058 <HAL_GPIO_Init+0xdc>
 8003fd0:	2b11      	cmp	r3, #17
 8003fd2:	d01b      	beq.n	800400c <HAL_GPIO_Init+0x90>
          break;
 8003fd4:	e043      	b.n	800405e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003fd6:	4a89      	ldr	r2, [pc, #548]	; (80041fc <HAL_GPIO_Init+0x280>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d026      	beq.n	800402a <HAL_GPIO_Init+0xae>
 8003fdc:	4a87      	ldr	r2, [pc, #540]	; (80041fc <HAL_GPIO_Init+0x280>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d806      	bhi.n	8003ff0 <HAL_GPIO_Init+0x74>
 8003fe2:	4a87      	ldr	r2, [pc, #540]	; (8004200 <HAL_GPIO_Init+0x284>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d020      	beq.n	800402a <HAL_GPIO_Init+0xae>
 8003fe8:	4a86      	ldr	r2, [pc, #536]	; (8004204 <HAL_GPIO_Init+0x288>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01d      	beq.n	800402a <HAL_GPIO_Init+0xae>
          break;
 8003fee:	e036      	b.n	800405e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ff0:	4a85      	ldr	r2, [pc, #532]	; (8004208 <HAL_GPIO_Init+0x28c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_GPIO_Init+0xae>
 8003ff6:	4a85      	ldr	r2, [pc, #532]	; (800420c <HAL_GPIO_Init+0x290>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d016      	beq.n	800402a <HAL_GPIO_Init+0xae>
 8003ffc:	4a84      	ldr	r2, [pc, #528]	; (8004210 <HAL_GPIO_Init+0x294>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0xae>
          break;
 8004002:	e02c      	b.n	800405e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	623b      	str	r3, [r7, #32]
          break;
 800400a:	e028      	b.n	800405e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	3304      	adds	r3, #4
 8004012:	623b      	str	r3, [r7, #32]
          break;
 8004014:	e023      	b.n	800405e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	3308      	adds	r3, #8
 800401c:	623b      	str	r3, [r7, #32]
          break;
 800401e:	e01e      	b.n	800405e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	330c      	adds	r3, #12
 8004026:	623b      	str	r3, [r7, #32]
          break;
 8004028:	e019      	b.n	800405e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004032:	2304      	movs	r3, #4
 8004034:	623b      	str	r3, [r7, #32]
          break;
 8004036:	e012      	b.n	800405e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004040:	2308      	movs	r3, #8
 8004042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	611a      	str	r2, [r3, #16]
          break;
 800404a:	e008      	b.n	800405e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800404c:	2308      	movs	r3, #8
 800404e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	615a      	str	r2, [r3, #20]
          break;
 8004056:	e002      	b.n	800405e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004058:	2300      	movs	r3, #0
 800405a:	623b      	str	r3, [r7, #32]
          break;
 800405c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2bff      	cmp	r3, #255	; 0xff
 8004062:	d801      	bhi.n	8004068 <HAL_GPIO_Init+0xec>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	e001      	b.n	800406c <HAL_GPIO_Init+0xf0>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2bff      	cmp	r3, #255	; 0xff
 8004072:	d802      	bhi.n	800407a <HAL_GPIO_Init+0xfe>
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	e002      	b.n	8004080 <HAL_GPIO_Init+0x104>
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	3b08      	subs	r3, #8
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	210f      	movs	r1, #15
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	fa01 f303 	lsl.w	r3, r1, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	401a      	ands	r2, r3
 8004092:	6a39      	ldr	r1, [r7, #32]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	431a      	orrs	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8096 	beq.w	80041da <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040ae:	4b59      	ldr	r3, [pc, #356]	; (8004214 <HAL_GPIO_Init+0x298>)
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	4a58      	ldr	r2, [pc, #352]	; (8004214 <HAL_GPIO_Init+0x298>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6193      	str	r3, [r2, #24]
 80040ba:	4b56      	ldr	r3, [pc, #344]	; (8004214 <HAL_GPIO_Init+0x298>)
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040c6:	4a54      	ldr	r2, [pc, #336]	; (8004218 <HAL_GPIO_Init+0x29c>)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	089b      	lsrs	r3, r3, #2
 80040cc:	3302      	adds	r3, #2
 80040ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	220f      	movs	r2, #15
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4013      	ands	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a4b      	ldr	r2, [pc, #300]	; (800421c <HAL_GPIO_Init+0x2a0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_GPIO_Init+0x19e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a4a      	ldr	r2, [pc, #296]	; (8004220 <HAL_GPIO_Init+0x2a4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00d      	beq.n	8004116 <HAL_GPIO_Init+0x19a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a49      	ldr	r2, [pc, #292]	; (8004224 <HAL_GPIO_Init+0x2a8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <HAL_GPIO_Init+0x196>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a48      	ldr	r2, [pc, #288]	; (8004228 <HAL_GPIO_Init+0x2ac>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_GPIO_Init+0x192>
 800410a:	2303      	movs	r3, #3
 800410c:	e006      	b.n	800411c <HAL_GPIO_Init+0x1a0>
 800410e:	2304      	movs	r3, #4
 8004110:	e004      	b.n	800411c <HAL_GPIO_Init+0x1a0>
 8004112:	2302      	movs	r3, #2
 8004114:	e002      	b.n	800411c <HAL_GPIO_Init+0x1a0>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_GPIO_Init+0x1a0>
 800411a:	2300      	movs	r3, #0
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	f002 0203 	and.w	r2, r2, #3
 8004122:	0092      	lsls	r2, r2, #2
 8004124:	4093      	lsls	r3, r2
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800412c:	493a      	ldr	r1, [pc, #232]	; (8004218 <HAL_GPIO_Init+0x29c>)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3302      	adds	r3, #2
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004146:	4b39      	ldr	r3, [pc, #228]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4938      	ldr	r1, [pc, #224]	; (800422c <HAL_GPIO_Init+0x2b0>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
 8004152:	e006      	b.n	8004162 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004154:	4b35      	ldr	r3, [pc, #212]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	43db      	mvns	r3, r3
 800415c:	4933      	ldr	r1, [pc, #204]	; (800422c <HAL_GPIO_Init+0x2b0>)
 800415e:	4013      	ands	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	492e      	ldr	r1, [pc, #184]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
 800417a:	e006      	b.n	800418a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_GPIO_Init+0x2b0>)
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	43db      	mvns	r3, r3
 8004184:	4929      	ldr	r1, [pc, #164]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8004186:	4013      	ands	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4924      	ldr	r1, [pc, #144]	; (800422c <HAL_GPIO_Init+0x2b0>)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
 80041a2:	e006      	b.n	80041b2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_GPIO_Init+0x2b0>)
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	491f      	ldr	r1, [pc, #124]	; (800422c <HAL_GPIO_Init+0x2b0>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_GPIO_Init+0x2b0>)
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	491a      	ldr	r1, [pc, #104]	; (800422c <HAL_GPIO_Init+0x2b0>)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60cb      	str	r3, [r1, #12]
 80041ca:	e006      	b.n	80041da <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_GPIO_Init+0x2b0>)
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	4915      	ldr	r1, [pc, #84]	; (800422c <HAL_GPIO_Init+0x2b0>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	3301      	adds	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f47f aed0 	bne.w	8003f90 <HAL_GPIO_Init+0x14>
  }
}
 80041f0:	bf00      	nop
 80041f2:	372c      	adds	r7, #44	; 0x2c
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	10210000 	.word	0x10210000
 8004200:	10110000 	.word	0x10110000
 8004204:	10120000 	.word	0x10120000
 8004208:	10310000 	.word	0x10310000
 800420c:	10320000 	.word	0x10320000
 8004210:	10220000 	.word	0x10220000
 8004214:	40021000 	.word	0x40021000
 8004218:	40010000 	.word	0x40010000
 800421c:	40010800 	.word	0x40010800
 8004220:	40010c00 	.word	0x40010c00
 8004224:	40011000 	.word	0x40011000
 8004228:	40011400 	.word	0x40011400
 800422c:	40010400 	.word	0x40010400

08004230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	e001      	b.n	8004252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	807b      	strh	r3, [r7, #2]
 800426a:	4613      	mov	r3, r2
 800426c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800426e:	787b      	ldrb	r3, [r7, #1]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004274:	887a      	ldrh	r2, [r7, #2]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800427a:	e003      	b.n	8004284 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800427c:	887b      	ldrh	r3, [r7, #2]
 800427e:	041a      	lsls	r2, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	611a      	str	r2, [r3, #16]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800428e:	b480      	push	{r7}
 8004290:	b085      	sub	sp, #20
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042a0:	887a      	ldrh	r2, [r7, #2]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4013      	ands	r3, r2
 80042a6:	041a      	lsls	r2, r3, #16
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	43d9      	mvns	r1, r3
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	400b      	ands	r3, r1
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	611a      	str	r2, [r3, #16]
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e26c      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8087 	beq.w	80043ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042e0:	4b92      	ldr	r3, [pc, #584]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d00c      	beq.n	8004306 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042ec:	4b8f      	ldr	r3, [pc, #572]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d112      	bne.n	800431e <HAL_RCC_OscConfig+0x5e>
 80042f8:	4b8c      	ldr	r3, [pc, #560]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d10b      	bne.n	800431e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004306:	4b89      	ldr	r3, [pc, #548]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d06c      	beq.n	80043ec <HAL_RCC_OscConfig+0x12c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d168      	bne.n	80043ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e246      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x76>
 8004328:	4b80      	ldr	r3, [pc, #512]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a7f      	ldr	r2, [pc, #508]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e02e      	b.n	8004394 <HAL_RCC_OscConfig+0xd4>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b7b      	ldr	r3, [pc, #492]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a7a      	ldr	r2, [pc, #488]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b78      	ldr	r3, [pc, #480]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a77      	ldr	r2, [pc, #476]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e01d      	b.n	8004394 <HAL_RCC_OscConfig+0xd4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0xbc>
 8004362:	4b72      	ldr	r3, [pc, #456]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a71      	ldr	r2, [pc, #452]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b6f      	ldr	r3, [pc, #444]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6e      	ldr	r2, [pc, #440]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0xd4>
 800437c:	4b6b      	ldr	r3, [pc, #428]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b68      	ldr	r3, [pc, #416]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a67      	ldr	r2, [pc, #412]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 800438e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004392:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe fe78 	bl	8003090 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fe fe74 	bl	8003090 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1fa      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b5d      	ldr	r3, [pc, #372]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe4>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fe fe64 	bl	8003090 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fe fe60 	bl	8003090 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1e6      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x10c>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d063      	beq.n	80044c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043fa:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004406:	4b49      	ldr	r3, [pc, #292]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b08      	cmp	r3, #8
 8004410:	d11c      	bne.n	800444c <HAL_RCC_OscConfig+0x18c>
 8004412:	4b46      	ldr	r3, [pc, #280]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RCC_OscConfig+0x176>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e1ba      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	4b3d      	ldr	r3, [pc, #244]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4939      	ldr	r1, [pc, #228]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	e03a      	b.n	80044c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d020      	beq.n	8004496 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b36      	ldr	r3, [pc, #216]	; (8004530 <HAL_RCC_OscConfig+0x270>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fe fe19 	bl	8003090 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004462:	f7fe fe15 	bl	8003090 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e19b      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004474:	4b2d      	ldr	r3, [pc, #180]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	4b2a      	ldr	r3, [pc, #168]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4927      	ldr	r1, [pc, #156]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	600b      	str	r3, [r1, #0]
 8004494:	e015      	b.n	80044c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004496:	4b26      	ldr	r3, [pc, #152]	; (8004530 <HAL_RCC_OscConfig+0x270>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fe fdf8 	bl	8003090 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a4:	f7fe fdf4 	bl	8003090 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e17a      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b6:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03a      	beq.n	8004544 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d019      	beq.n	800450a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HAL_RCC_OscConfig+0x274>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fe fdd8 	bl	8003090 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fe fdd4 	bl	8003090 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e15a      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f6:	4b0d      	ldr	r3, [pc, #52]	; (800452c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004502:	2001      	movs	r0, #1
 8004504:	f000 fac6 	bl	8004a94 <RCC_Delay>
 8004508:	e01c      	b.n	8004544 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <HAL_RCC_OscConfig+0x274>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004510:	f7fe fdbe 	bl	8003090 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004516:	e00f      	b.n	8004538 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004518:	f7fe fdba 	bl	8003090 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d908      	bls.n	8004538 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e140      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
 8004530:	42420000 	.word	0x42420000
 8004534:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004538:	4b9e      	ldr	r3, [pc, #632]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e9      	bne.n	8004518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80a6 	beq.w	800469e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004556:	4b97      	ldr	r3, [pc, #604]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	4b94      	ldr	r3, [pc, #592]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	4a93      	ldr	r2, [pc, #588]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	61d3      	str	r3, [r2, #28]
 800456e:	4b91      	ldr	r3, [pc, #580]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b8e      	ldr	r3, [pc, #568]	; (80047b8 <HAL_RCC_OscConfig+0x4f8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d118      	bne.n	80045bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458a:	4b8b      	ldr	r3, [pc, #556]	; (80047b8 <HAL_RCC_OscConfig+0x4f8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a8a      	ldr	r2, [pc, #552]	; (80047b8 <HAL_RCC_OscConfig+0x4f8>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004596:	f7fe fd7b 	bl	8003090 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fe fd77 	bl	8003090 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b64      	cmp	r3, #100	; 0x64
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0fd      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b0:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <HAL_RCC_OscConfig+0x4f8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_OscConfig+0x312>
 80045c4:	4b7b      	ldr	r3, [pc, #492]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	4a7a      	ldr	r2, [pc, #488]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6213      	str	r3, [r2, #32]
 80045d0:	e02d      	b.n	800462e <HAL_RCC_OscConfig+0x36e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x334>
 80045da:	4b76      	ldr	r3, [pc, #472]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a75      	ldr	r2, [pc, #468]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6213      	str	r3, [r2, #32]
 80045e6:	4b73      	ldr	r3, [pc, #460]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a72      	ldr	r2, [pc, #456]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	6213      	str	r3, [r2, #32]
 80045f2:	e01c      	b.n	800462e <HAL_RCC_OscConfig+0x36e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	d10c      	bne.n	8004616 <HAL_RCC_OscConfig+0x356>
 80045fc:	4b6d      	ldr	r3, [pc, #436]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a6c      	ldr	r2, [pc, #432]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004602:	f043 0304 	orr.w	r3, r3, #4
 8004606:	6213      	str	r3, [r2, #32]
 8004608:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4a69      	ldr	r2, [pc, #420]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6213      	str	r3, [r2, #32]
 8004614:	e00b      	b.n	800462e <HAL_RCC_OscConfig+0x36e>
 8004616:	4b67      	ldr	r3, [pc, #412]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a66      	ldr	r2, [pc, #408]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	4b64      	ldr	r3, [pc, #400]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a63      	ldr	r2, [pc, #396]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d015      	beq.n	8004662 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fe fd2b 	bl	8003090 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463c:	e00a      	b.n	8004654 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fe fd27 	bl	8003090 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0ab      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004654:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ee      	beq.n	800463e <HAL_RCC_OscConfig+0x37e>
 8004660:	e014      	b.n	800468c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004662:	f7fe fd15 	bl	8003090 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004668:	e00a      	b.n	8004680 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fe fd11 	bl	8003090 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	; 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e095      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004680:	4b4c      	ldr	r3, [pc, #304]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ee      	bne.n	800466a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d105      	bne.n	800469e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004692:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4a47      	ldr	r2, [pc, #284]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8081 	beq.w	80047aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d061      	beq.n	8004778 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d146      	bne.n	800474a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	4b3f      	ldr	r3, [pc, #252]	; (80047bc <HAL_RCC_OscConfig+0x4fc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fe fce5 	bl	8003090 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fe fce1 	bl	8003090 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e067      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046dc:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d108      	bne.n	8004704 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046f2:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	492d      	ldr	r1, [pc, #180]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a19      	ldr	r1, [r3, #32]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	430b      	orrs	r3, r1
 8004716:	4927      	ldr	r1, [pc, #156]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_OscConfig+0x4fc>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fe fcb5 	bl	8003090 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472a:	f7fe fcb1 	bl	8003090 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e037      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x46a>
 8004748:	e02f      	b.n	80047aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCC_OscConfig+0x4fc>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe fc9e 	bl	8003090 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fe fc9a 	bl	8003090 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e020      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x498>
 8004776:	e018      	b.n	80047aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e013      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_OscConfig+0x4f4>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	429a      	cmp	r2, r3
 8004796:	d106      	bne.n	80047a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
 80047bc:	42420060 	.word	0x42420060

080047c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0d0      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d910      	bls.n	8004804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	4965      	ldr	r1, [pc, #404]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0b8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a52      	ldr	r2, [pc, #328]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800483e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d040      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d115      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e073      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06b      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4936      	ldr	r1, [pc, #216]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b0:	f7fe fbee 	bl	8003090 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fe fbea 	bl	8003090 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e053      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 020c 	and.w	r2, r3, #12
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1eb      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d210      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 0207 	bic.w	r2, r3, #7
 80048f6:	4922      	ldr	r1, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e032      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800494e:	f000 f821 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004952:	4601      	mov	r1, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	5cd3      	ldrb	r3, [r2, r3]
 8004962:	fa21 f303 	lsr.w	r3, r1, r3
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1cc>)
 8004968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_ClockConfig+0x1d0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fb4c 	bl	800300c <HAL_InitTick>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40022000 	.word	0x40022000
 8004984:	40021000 	.word	0x40021000
 8004988:	08006174 	.word	0x08006174
 800498c:	20000028 	.word	0x20000028
 8004990:	2000002c 	.word	0x2000002c

08004994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b490      	push	{r4, r7}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800499a:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 800499c:	1d3c      	adds	r4, r7, #4
 800499e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049be:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d002      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x40>
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d003      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x46>
 80049d2:	e02d      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d6:	623b      	str	r3, [r7, #32]
      break;
 80049d8:	e02d      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	0c9b      	lsrs	r3, r3, #18
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049e6:	4413      	add	r3, r2
 80049e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	0c5b      	lsrs	r3, r3, #17
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a06:	4413      	add	r3, r2
 8004a08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a12:	fb02 f203 	mul.w	r2, r2, r3
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1e:	e004      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	623b      	str	r3, [r7, #32]
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a32:	623b      	str	r3, [r7, #32]
      break;
 8004a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a36:	6a3b      	ldr	r3, [r7, #32]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	; 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc90      	pop	{r4, r7}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	0800614c 	.word	0x0800614c
 8004a48:	0800615c 	.word	0x0800615c
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	007a1200 	.word	0x007a1200
 8004a54:	003d0900 	.word	0x003d0900

08004a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a5c:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	20000028 	.word	0x20000028

08004a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a70:	f7ff fff2 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8004a74:	4601      	mov	r1, r0
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	0adb      	lsrs	r3, r3, #11
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	4a03      	ldr	r2, [pc, #12]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a82:	5cd3      	ldrb	r3, [r2, r3]
 8004a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	08006184 	.word	0x08006184

08004a94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <RCC_Delay+0x34>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <RCC_Delay+0x38>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	0a5b      	lsrs	r3, r3, #9
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ab0:	bf00      	nop
  }
  while (Delay --);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1e5a      	subs	r2, r3, #1
 8004ab6:	60fa      	str	r2, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f9      	bne.n	8004ab0 <RCC_Delay+0x1c>
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000028 	.word	0x20000028
 8004acc:	10624dd3 	.word	0x10624dd3

08004ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d07d      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af0:	4b4f      	ldr	r3, [pc, #316]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10d      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	4b4c      	ldr	r3, [pc, #304]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4a4b      	ldr	r2, [pc, #300]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b06:	61d3      	str	r3, [r2, #28]
 8004b08:	4b49      	ldr	r3, [pc, #292]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	4b46      	ldr	r3, [pc, #280]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d118      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b24:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a42      	ldr	r2, [pc, #264]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b30:	f7fe faae 	bl	8003090 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	e008      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b38:	f7fe faaa 	bl	8003090 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e06d      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b56:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02e      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d027      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b74:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b7e:	4b2e      	ldr	r3, [pc, #184]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b84:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b8a:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d014      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fe fa79 	bl	8003090 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fe fa75 	bl	8003090 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e036      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ee      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4917      	ldr	r1, [pc, #92]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	490b      	ldr	r1, [pc, #44]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	4904      	ldr	r1, [pc, #16]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40007000 	.word	0x40007000
 8004c38:	42420440 	.word	0x42420440

08004c3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b08d      	sub	sp, #52	; 0x34
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c44:	4b55      	ldr	r3, [pc, #340]	; (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004c46:	f107 040c 	add.w	r4, r7, #12
 8004c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c50:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	2300      	movs	r3, #0
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d07f      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d002      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d048      	beq.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004c78:	e08b      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004c80:	4b48      	ldr	r3, [pc, #288]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d07f      	beq.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	0c9b      	lsrs	r3, r3, #18
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c98:	4413      	add	r3, r2
 8004c9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c9e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d018      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004caa:	4b3e      	ldr	r3, [pc, #248]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	0c5b      	lsrs	r3, r3, #17
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cb8:	4413      	add	r3, r2
 8004cba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004cca:	4a37      	ldr	r2, [pc, #220]	; (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cda:	e004      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	4a33      	ldr	r2, [pc, #204]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004ce0:	fb02 f303 	mul.w	r3, r2, r3
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004cf8:	e048      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4a2c      	ldr	r2, [pc, #176]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d08:	e040      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1a:	d108      	bne.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2c:	e01f      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d38:	d109      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004d46:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4c:	e00f      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d58:	d11a      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d014      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004d66:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d6c:	e010      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004d6e:	e00f      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004d70:	f7ff fe7c 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8004d74:	4602      	mov	r2, r0
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	0b9b      	lsrs	r3, r3, #14
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	3301      	adds	r3, #1
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004d8c:	bf00      	nop
 8004d8e:	e000      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004d90:	bf00      	nop
    }
  }
  return (frequency);
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3734      	adds	r7, #52	; 0x34
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd90      	pop	{r4, r7, pc}
 8004d9c:	08006160 	.word	0x08006160
 8004da0:	08006170 	.word	0x08006170
 8004da4:	40021000 	.word	0x40021000
 8004da8:	007a1200 	.word	0x007a1200
 8004dac:	003d0900 	.word	0x003d0900
 8004db0:	aaaaaaab 	.word	0xaaaaaaab

08004db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e041      	b.n	8004e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fd ffa4 	bl	8002d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fc1c 	bl	8005630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d001      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e03a      	b.n	8004ee2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_TIM_Base_Start_IT+0x98>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x58>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e96:	d009      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x58>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a14      	ldr	r2, [pc, #80]	; (8004ef0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x58>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d111      	bne.n	8004ed0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b06      	cmp	r3, #6
 8004ebc:	d010      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ece:	e007      	b.n	8004ee0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800

08004ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e041      	b.n	8004f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f839 	bl	8004f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 fb7a 	bl	8005630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d109      	bne.n	8004fcc <HAL_TIM_PWM_Start+0x24>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e022      	b.n	8005012 <HAL_TIM_PWM_Start+0x6a>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d109      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0x3e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	bf14      	ite	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	2300      	moveq	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	e015      	b.n	8005012 <HAL_TIM_PWM_Start+0x6a>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d109      	bne.n	8005000 <HAL_TIM_PWM_Start+0x58>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e008      	b.n	8005012 <HAL_TIM_PWM_Start+0x6a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e05e      	b.n	80050d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0x82>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005028:	e013      	b.n	8005052 <HAL_TIM_PWM_Start+0xaa>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start+0x92>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005038:	e00b      	b.n	8005052 <HAL_TIM_PWM_Start+0xaa>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start+0xa2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005048:	e003      	b.n	8005052 <HAL_TIM_PWM_Start+0xaa>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fd68 	bl	8005b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <HAL_TIM_PWM_Start+0x138>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d107      	bne.n	800507a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_TIM_PWM_Start+0x138>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00e      	beq.n	80050a2 <HAL_TIM_PWM_Start+0xfa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d009      	beq.n	80050a2 <HAL_TIM_PWM_Start+0xfa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <HAL_TIM_PWM_Start+0x13c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_TIM_PWM_Start+0xfa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <HAL_TIM_PWM_Start+0x140>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d111      	bne.n	80050c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d010      	beq.n	80050d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	e007      	b.n	80050d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0202 	mvn.w	r2, #2
 8005118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa62 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa55 	bl	80055e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fa64 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d122      	bne.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b04      	cmp	r3, #4
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fa38 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fa2b 	bl	80055e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fa3a 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0208 	mvn.w	r2, #8
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2204      	movs	r2, #4
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa0e 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa01 	bl	80055e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fa10 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b10      	cmp	r3, #16
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0210 	mvn.w	r2, #16
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2208      	movs	r2, #8
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9e4 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9d7 	bl	80055e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f9e6 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0201 	mvn.w	r2, #1
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd fc2c 	bl	8002ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b80      	cmp	r3, #128	; 0x80
 800527c:	d10e      	bne.n	800529c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d107      	bne.n	800529c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fd26 	bl	8005ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d10e      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d107      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f9aa 	bl	800561c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0220 	mvn.w	r2, #32
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fcf1 	bl	8005cd6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005312:	2302      	movs	r3, #2
 8005314:	e0ac      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b0c      	cmp	r3, #12
 8005322:	f200 809f 	bhi.w	8005464 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005361 	.word	0x08005361
 8005330:	08005465 	.word	0x08005465
 8005334:	08005465 	.word	0x08005465
 8005338:	08005465 	.word	0x08005465
 800533c:	080053a1 	.word	0x080053a1
 8005340:	08005465 	.word	0x08005465
 8005344:	08005465 	.word	0x08005465
 8005348:	08005465 	.word	0x08005465
 800534c:	080053e3 	.word	0x080053e3
 8005350:	08005465 	.word	0x08005465
 8005354:	08005465 	.word	0x08005465
 8005358:	08005465 	.word	0x08005465
 800535c:	08005423 	.word	0x08005423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f9c4 	bl	80056f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0204 	bic.w	r2, r2, #4
 800538a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	619a      	str	r2, [r3, #24]
      break;
 800539e:	e062      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fa0a 	bl	80057c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	619a      	str	r2, [r3, #24]
      break;
 80053e0:	e041      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fa53 	bl	8005894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0208 	orr.w	r2, r2, #8
 80053fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0204 	bic.w	r2, r2, #4
 800540c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69d9      	ldr	r1, [r3, #28]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	61da      	str	r2, [r3, #28]
      break;
 8005420:	e021      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fa9d 	bl	8005968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800543c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69d9      	ldr	r1, [r3, #28]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	021a      	lsls	r2, r3, #8
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	61da      	str	r2, [r3, #28]
      break;
 8005462:	e000      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIM_ConfigClockSource+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e0a6      	b.n	80055de <HAL_TIM_ConfigClockSource+0x166>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d067      	beq.n	8005598 <HAL_TIM_ConfigClockSource+0x120>
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d80b      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x6c>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d073      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0x140>
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d802      	bhi.n	80054da <HAL_TIM_ConfigClockSource+0x62>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d06f      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054d8:	e078      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d06c      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0x140>
 80054de:	2b30      	cmp	r3, #48	; 0x30
 80054e0:	d06a      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054e2:	e073      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054e4:	2b70      	cmp	r3, #112	; 0x70
 80054e6:	d00d      	beq.n	8005504 <HAL_TIM_ConfigClockSource+0x8c>
 80054e8:	2b70      	cmp	r3, #112	; 0x70
 80054ea:	d804      	bhi.n	80054f6 <HAL_TIM_ConfigClockSource+0x7e>
 80054ec:	2b50      	cmp	r3, #80	; 0x50
 80054ee:	d033      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0xe0>
 80054f0:	2b60      	cmp	r3, #96	; 0x60
 80054f2:	d041      	beq.n	8005578 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80054f4:	e06a      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d066      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x152>
 80054fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005500:	d017      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005502:	e063      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6899      	ldr	r1, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f000 faed 	bl	8005af2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005526:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	609a      	str	r2, [r3, #8]
      break;
 8005530:	e04c      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6899      	ldr	r1, [r3, #8]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f000 fad6 	bl	8005af2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005554:	609a      	str	r2, [r3, #8]
      break;
 8005556:	e039      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	461a      	mov	r2, r3
 8005566:	f000 fa4d 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2150      	movs	r1, #80	; 0x50
 8005570:	4618      	mov	r0, r3
 8005572:	f000 faa4 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8005576:	e029      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6859      	ldr	r1, [r3, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	461a      	mov	r2, r3
 8005586:	f000 fa6b 	bl	8005a60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2160      	movs	r1, #96	; 0x60
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fa94 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8005596:	e019      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6859      	ldr	r1, [r3, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	461a      	mov	r2, r3
 80055a6:	f000 fa2d 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2140      	movs	r1, #64	; 0x40
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fa84 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 80055b6:	e009      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 fa7b 	bl	8005abe <TIM_ITRx_SetConfig>
        break;
 80055c8:	e000      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80055ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr
	...

08005630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <TIM_Base_SetConfig+0xb8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_Base_SetConfig+0x30>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d007      	beq.n	8005660 <TIM_Base_SetConfig+0x30>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a26      	ldr	r2, [pc, #152]	; (80056ec <TIM_Base_SetConfig+0xbc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x30>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <TIM_Base_SetConfig+0xc0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <TIM_Base_SetConfig+0xb8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_Base_SetConfig+0x62>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d007      	beq.n	8005692 <TIM_Base_SetConfig+0x62>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a19      	ldr	r2, [pc, #100]	; (80056ec <TIM_Base_SetConfig+0xbc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_Base_SetConfig+0x62>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <TIM_Base_SetConfig+0xc0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d108      	bne.n	80056a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a07      	ldr	r2, [pc, #28]	; (80056e8 <TIM_Base_SetConfig+0xb8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d103      	bne.n	80056d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	615a      	str	r2, [r3, #20]
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800

080056f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 0302 	bic.w	r3, r3, #2
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <TIM_OC1_SetConfig+0xc8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10c      	bne.n	800576a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0308 	bic.w	r3, r3, #8
 8005756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a13      	ldr	r2, [pc, #76]	; (80057bc <TIM_OC1_SetConfig+0xc8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00

080057c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0320 	bic.w	r3, r3, #32
 800580a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <TIM_OC2_SetConfig+0xd0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10d      	bne.n	800583c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a14      	ldr	r2, [pc, #80]	; (8005890 <TIM_OC2_SetConfig+0xd0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d113      	bne.n	800586c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800584a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	40012c00 	.word	0x40012c00

08005894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <TIM_OC3_SetConfig+0xd0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10d      	bne.n	800590e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800590c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a14      	ldr	r2, [pc, #80]	; (8005964 <TIM_OC3_SetConfig+0xd0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d113      	bne.n	800593e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40012c00 	.word	0x40012c00

08005968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	031b      	lsls	r3, r3, #12
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <TIM_OC4_SetConfig+0x98>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d109      	bne.n	80059dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	019b      	lsls	r3, r3, #6
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr
 8005a00:	40012c00 	.word	0x40012c00

08005a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 030a 	bic.w	r3, r3, #10
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f023 0210 	bic.w	r2, r3, #16
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	031b      	lsls	r3, r3, #12
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f043 0307 	orr.w	r3, r3, #7
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	021a      	lsls	r2, r3, #8
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	609a      	str	r2, [r3, #8]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2201      	movs	r2, #1
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1a      	ldr	r2, [r3, #32]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	401a      	ands	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	fa01 f303 	lsl.w	r3, r1, r3
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e046      	b.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bdc:	d009      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10c      	bne.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800

08005c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e03d      	b.n	8005ccc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <atoi>:
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	f000 b8cb 	b.w	8005e98 <strtol>
	...

08005d04 <__libc_init_array>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	2500      	movs	r5, #0
 8005d08:	4e0c      	ldr	r6, [pc, #48]	; (8005d3c <__libc_init_array+0x38>)
 8005d0a:	4c0d      	ldr	r4, [pc, #52]	; (8005d40 <__libc_init_array+0x3c>)
 8005d0c:	1ba4      	subs	r4, r4, r6
 8005d0e:	10a4      	asrs	r4, r4, #2
 8005d10:	42a5      	cmp	r5, r4
 8005d12:	d109      	bne.n	8005d28 <__libc_init_array+0x24>
 8005d14:	f000 f936 	bl	8005f84 <_init>
 8005d18:	2500      	movs	r5, #0
 8005d1a:	4e0a      	ldr	r6, [pc, #40]	; (8005d44 <__libc_init_array+0x40>)
 8005d1c:	4c0a      	ldr	r4, [pc, #40]	; (8005d48 <__libc_init_array+0x44>)
 8005d1e:	1ba4      	subs	r4, r4, r6
 8005d20:	10a4      	asrs	r4, r4, #2
 8005d22:	42a5      	cmp	r5, r4
 8005d24:	d105      	bne.n	8005d32 <__libc_init_array+0x2e>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d2c:	4798      	blx	r3
 8005d2e:	3501      	adds	r5, #1
 8005d30:	e7ee      	b.n	8005d10 <__libc_init_array+0xc>
 8005d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d36:	4798      	blx	r3
 8005d38:	3501      	adds	r5, #1
 8005d3a:	e7f2      	b.n	8005d22 <__libc_init_array+0x1e>
 8005d3c:	080062bc 	.word	0x080062bc
 8005d40:	080062bc 	.word	0x080062bc
 8005d44:	080062bc 	.word	0x080062bc
 8005d48:	080062c0 	.word	0x080062c0

08005d4c <__itoa>:
 8005d4c:	1e93      	subs	r3, r2, #2
 8005d4e:	2b22      	cmp	r3, #34	; 0x22
 8005d50:	b510      	push	{r4, lr}
 8005d52:	460c      	mov	r4, r1
 8005d54:	d904      	bls.n	8005d60 <__itoa+0x14>
 8005d56:	2300      	movs	r3, #0
 8005d58:	461c      	mov	r4, r3
 8005d5a:	700b      	strb	r3, [r1, #0]
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bd10      	pop	{r4, pc}
 8005d60:	2a0a      	cmp	r2, #10
 8005d62:	d109      	bne.n	8005d78 <__itoa+0x2c>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	da07      	bge.n	8005d78 <__itoa+0x2c>
 8005d68:	232d      	movs	r3, #45	; 0x2d
 8005d6a:	700b      	strb	r3, [r1, #0]
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	4240      	negs	r0, r0
 8005d70:	4421      	add	r1, r4
 8005d72:	f000 f8a7 	bl	8005ec4 <__utoa>
 8005d76:	e7f1      	b.n	8005d5c <__itoa+0x10>
 8005d78:	2100      	movs	r1, #0
 8005d7a:	e7f9      	b.n	8005d70 <__itoa+0x24>

08005d7c <itoa>:
 8005d7c:	f7ff bfe6 	b.w	8005d4c <__itoa>

08005d80 <memset>:
 8005d80:	4603      	mov	r3, r0
 8005d82:	4402      	add	r2, r0
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d100      	bne.n	8005d8a <memset+0xa>
 8005d88:	4770      	bx	lr
 8005d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8e:	e7f9      	b.n	8005d84 <memset+0x4>

08005d90 <strcpy>:
 8005d90:	4603      	mov	r3, r0
 8005d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d96:	f803 2b01 	strb.w	r2, [r3], #1
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1f9      	bne.n	8005d92 <strcpy+0x2>
 8005d9e:	4770      	bx	lr

08005da0 <_strtol_l.isra.0>:
 8005da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da4:	4680      	mov	r8, r0
 8005da6:	4689      	mov	r9, r1
 8005da8:	4692      	mov	sl, r2
 8005daa:	461e      	mov	r6, r3
 8005dac:	460f      	mov	r7, r1
 8005dae:	463d      	mov	r5, r7
 8005db0:	9808      	ldr	r0, [sp, #32]
 8005db2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005db6:	f000 f8c3 	bl	8005f40 <__locale_ctype_ptr_l>
 8005dba:	4420      	add	r0, r4
 8005dbc:	7843      	ldrb	r3, [r0, #1]
 8005dbe:	f013 0308 	ands.w	r3, r3, #8
 8005dc2:	d132      	bne.n	8005e2a <_strtol_l.isra.0+0x8a>
 8005dc4:	2c2d      	cmp	r4, #45	; 0x2d
 8005dc6:	d132      	bne.n	8005e2e <_strtol_l.isra.0+0x8e>
 8005dc8:	2201      	movs	r2, #1
 8005dca:	787c      	ldrb	r4, [r7, #1]
 8005dcc:	1cbd      	adds	r5, r7, #2
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	d05d      	beq.n	8005e8e <_strtol_l.isra.0+0xee>
 8005dd2:	2e10      	cmp	r6, #16
 8005dd4:	d109      	bne.n	8005dea <_strtol_l.isra.0+0x4a>
 8005dd6:	2c30      	cmp	r4, #48	; 0x30
 8005dd8:	d107      	bne.n	8005dea <_strtol_l.isra.0+0x4a>
 8005dda:	782b      	ldrb	r3, [r5, #0]
 8005ddc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005de0:	2b58      	cmp	r3, #88	; 0x58
 8005de2:	d14f      	bne.n	8005e84 <_strtol_l.isra.0+0xe4>
 8005de4:	2610      	movs	r6, #16
 8005de6:	786c      	ldrb	r4, [r5, #1]
 8005de8:	3502      	adds	r5, #2
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	bf14      	ite	ne
 8005dee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005df2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005df6:	2700      	movs	r7, #0
 8005df8:	fbb1 fcf6 	udiv	ip, r1, r6
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005e02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d817      	bhi.n	8005e3a <_strtol_l.isra.0+0x9a>
 8005e0a:	461c      	mov	r4, r3
 8005e0c:	42a6      	cmp	r6, r4
 8005e0e:	dd23      	ble.n	8005e58 <_strtol_l.isra.0+0xb8>
 8005e10:	1c7b      	adds	r3, r7, #1
 8005e12:	d007      	beq.n	8005e24 <_strtol_l.isra.0+0x84>
 8005e14:	4584      	cmp	ip, r0
 8005e16:	d31c      	bcc.n	8005e52 <_strtol_l.isra.0+0xb2>
 8005e18:	d101      	bne.n	8005e1e <_strtol_l.isra.0+0x7e>
 8005e1a:	45a6      	cmp	lr, r4
 8005e1c:	db19      	blt.n	8005e52 <_strtol_l.isra.0+0xb2>
 8005e1e:	2701      	movs	r7, #1
 8005e20:	fb00 4006 	mla	r0, r0, r6, r4
 8005e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e28:	e7eb      	b.n	8005e02 <_strtol_l.isra.0+0x62>
 8005e2a:	462f      	mov	r7, r5
 8005e2c:	e7bf      	b.n	8005dae <_strtol_l.isra.0+0xe>
 8005e2e:	2c2b      	cmp	r4, #43	; 0x2b
 8005e30:	bf04      	itt	eq
 8005e32:	1cbd      	addeq	r5, r7, #2
 8005e34:	787c      	ldrbeq	r4, [r7, #1]
 8005e36:	461a      	mov	r2, r3
 8005e38:	e7c9      	b.n	8005dce <_strtol_l.isra.0+0x2e>
 8005e3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005e3e:	2b19      	cmp	r3, #25
 8005e40:	d801      	bhi.n	8005e46 <_strtol_l.isra.0+0xa6>
 8005e42:	3c37      	subs	r4, #55	; 0x37
 8005e44:	e7e2      	b.n	8005e0c <_strtol_l.isra.0+0x6c>
 8005e46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005e4a:	2b19      	cmp	r3, #25
 8005e4c:	d804      	bhi.n	8005e58 <_strtol_l.isra.0+0xb8>
 8005e4e:	3c57      	subs	r4, #87	; 0x57
 8005e50:	e7dc      	b.n	8005e0c <_strtol_l.isra.0+0x6c>
 8005e52:	f04f 37ff 	mov.w	r7, #4294967295
 8005e56:	e7e5      	b.n	8005e24 <_strtol_l.isra.0+0x84>
 8005e58:	1c7b      	adds	r3, r7, #1
 8005e5a:	d108      	bne.n	8005e6e <_strtol_l.isra.0+0xce>
 8005e5c:	2322      	movs	r3, #34	; 0x22
 8005e5e:	4608      	mov	r0, r1
 8005e60:	f8c8 3000 	str.w	r3, [r8]
 8005e64:	f1ba 0f00 	cmp.w	sl, #0
 8005e68:	d107      	bne.n	8005e7a <_strtol_l.isra.0+0xda>
 8005e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6e:	b102      	cbz	r2, 8005e72 <_strtol_l.isra.0+0xd2>
 8005e70:	4240      	negs	r0, r0
 8005e72:	f1ba 0f00 	cmp.w	sl, #0
 8005e76:	d0f8      	beq.n	8005e6a <_strtol_l.isra.0+0xca>
 8005e78:	b10f      	cbz	r7, 8005e7e <_strtol_l.isra.0+0xde>
 8005e7a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005e7e:	f8ca 9000 	str.w	r9, [sl]
 8005e82:	e7f2      	b.n	8005e6a <_strtol_l.isra.0+0xca>
 8005e84:	2430      	movs	r4, #48	; 0x30
 8005e86:	2e00      	cmp	r6, #0
 8005e88:	d1af      	bne.n	8005dea <_strtol_l.isra.0+0x4a>
 8005e8a:	2608      	movs	r6, #8
 8005e8c:	e7ad      	b.n	8005dea <_strtol_l.isra.0+0x4a>
 8005e8e:	2c30      	cmp	r4, #48	; 0x30
 8005e90:	d0a3      	beq.n	8005dda <_strtol_l.isra.0+0x3a>
 8005e92:	260a      	movs	r6, #10
 8005e94:	e7a9      	b.n	8005dea <_strtol_l.isra.0+0x4a>
	...

08005e98 <strtol>:
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <strtol+0x24>)
 8005e9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e9c:	681c      	ldr	r4, [r3, #0]
 8005e9e:	4d08      	ldr	r5, [pc, #32]	; (8005ec0 <strtol+0x28>)
 8005ea0:	6a23      	ldr	r3, [r4, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf08      	it	eq
 8005ea6:	462b      	moveq	r3, r5
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	460a      	mov	r2, r1
 8005eae:	4601      	mov	r1, r0
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff ff75 	bl	8005da0 <_strtol_l.isra.0>
 8005eb6:	b003      	add	sp, #12
 8005eb8:	bd30      	pop	{r4, r5, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000034 	.word	0x20000034
 8005ec0:	20000098 	.word	0x20000098

08005ec4 <__utoa>:
 8005ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec6:	b08b      	sub	sp, #44	; 0x2c
 8005ec8:	4605      	mov	r5, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	466e      	mov	r6, sp
 8005ece:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <__utoa+0x78>)
 8005ed0:	f103 0c20 	add.w	ip, r3, #32
 8005ed4:	4637      	mov	r7, r6
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	3308      	adds	r3, #8
 8005edc:	c703      	stmia	r7!, {r0, r1}
 8005ede:	4563      	cmp	r3, ip
 8005ee0:	463e      	mov	r6, r7
 8005ee2:	d1f7      	bne.n	8005ed4 <__utoa+0x10>
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	6038      	str	r0, [r7, #0]
 8005eea:	713b      	strb	r3, [r7, #4]
 8005eec:	1e93      	subs	r3, r2, #2
 8005eee:	2b22      	cmp	r3, #34	; 0x22
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	d904      	bls.n	8005f00 <__utoa+0x3c>
 8005ef6:	7023      	strb	r3, [r4, #0]
 8005ef8:	461c      	mov	r4, r3
 8005efa:	4620      	mov	r0, r4
 8005efc:	b00b      	add	sp, #44	; 0x2c
 8005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f00:	1e66      	subs	r6, r4, #1
 8005f02:	fbb5 f0f2 	udiv	r0, r5, r2
 8005f06:	fb02 5510 	mls	r5, r2, r0, r5
 8005f0a:	af0a      	add	r7, sp, #40	; 0x28
 8005f0c:	443d      	add	r5, r7
 8005f0e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005f18:	4605      	mov	r5, r0
 8005f1a:	b968      	cbnz	r0, 8005f38 <__utoa+0x74>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	5460      	strb	r0, [r4, r1]
 8005f20:	4423      	add	r3, r4
 8005f22:	1b19      	subs	r1, r3, r4
 8005f24:	1b10      	subs	r0, r2, r4
 8005f26:	4281      	cmp	r1, r0
 8005f28:	dde7      	ble.n	8005efa <__utoa+0x36>
 8005f2a:	7811      	ldrb	r1, [r2, #0]
 8005f2c:	7818      	ldrb	r0, [r3, #0]
 8005f2e:	f802 0b01 	strb.w	r0, [r2], #1
 8005f32:	f803 1901 	strb.w	r1, [r3], #-1
 8005f36:	e7f4      	b.n	8005f22 <__utoa+0x5e>
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e7e2      	b.n	8005f02 <__utoa+0x3e>
 8005f3c:	0800618c 	.word	0x0800618c

08005f40 <__locale_ctype_ptr_l>:
 8005f40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005f44:	4770      	bx	lr

08005f46 <__ascii_mbtowc>:
 8005f46:	b082      	sub	sp, #8
 8005f48:	b901      	cbnz	r1, 8005f4c <__ascii_mbtowc+0x6>
 8005f4a:	a901      	add	r1, sp, #4
 8005f4c:	b142      	cbz	r2, 8005f60 <__ascii_mbtowc+0x1a>
 8005f4e:	b14b      	cbz	r3, 8005f64 <__ascii_mbtowc+0x1e>
 8005f50:	7813      	ldrb	r3, [r2, #0]
 8005f52:	600b      	str	r3, [r1, #0]
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	1c10      	adds	r0, r2, #0
 8005f58:	bf18      	it	ne
 8005f5a:	2001      	movne	r0, #1
 8005f5c:	b002      	add	sp, #8
 8005f5e:	4770      	bx	lr
 8005f60:	4610      	mov	r0, r2
 8005f62:	e7fb      	b.n	8005f5c <__ascii_mbtowc+0x16>
 8005f64:	f06f 0001 	mvn.w	r0, #1
 8005f68:	e7f8      	b.n	8005f5c <__ascii_mbtowc+0x16>

08005f6a <__ascii_wctomb>:
 8005f6a:	b149      	cbz	r1, 8005f80 <__ascii_wctomb+0x16>
 8005f6c:	2aff      	cmp	r2, #255	; 0xff
 8005f6e:	bf8b      	itete	hi
 8005f70:	238a      	movhi	r3, #138	; 0x8a
 8005f72:	700a      	strbls	r2, [r1, #0]
 8005f74:	6003      	strhi	r3, [r0, #0]
 8005f76:	2001      	movls	r0, #1
 8005f78:	bf88      	it	hi
 8005f7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f7e:	4770      	bx	lr
 8005f80:	4608      	mov	r0, r1
 8005f82:	4770      	bx	lr

08005f84 <_init>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr

08005f90 <_fini>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr
